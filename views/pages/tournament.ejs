<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tournaments - Malaysia Pickleball Association</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    .tournament-hero {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      position: relative;
      overflow: hidden;
      padding-top: 7rem; /* Fixed padding-top for navbar clearance */
    }
    .tournament-hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
      animation: float 20s infinite linear;
    }
    @keyframes float {
      0% { transform: translateX(0) translateY(0); }
      100% { transform: translateX(-60px) translateY(-60px); }
    }
    .tournament-card {
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }
    .tournament-card:hover {
      transform: translateY(-8px) scale(1.02);
      box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    .filter-btn {
      transition: all 0.3s ease;
    }
    .filter-btn.active {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      transform: scale(1.05);
    }
    .calendar-cell {
      transition: all 0.2s ease;
      cursor: pointer;
    }
    .calendar-cell:hover {
      transform: scale(1.1);
      z-index: 10;
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    .view-toggle-btn {
      transition: all 0.3s ease;
    }
    .view-toggle-btn.active {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    .fade-in {
      animation: fadeIn 0.6s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .slide-in {
      animation: slideIn 0.8s ease-out;
    }
    @keyframes slideIn {
      from { opacity: 0; transform: translateX(-30px); }
      to { opacity: 1; transform: translateX(0); }
    }
    .modal {
      transition: all 0.3s ease;
    }
    .modal.show {
      display: flex !important;
    }
    
    /* General modal scrolling for all screen sizes */
    #modal-content {
      max-height: 90vh;
      overflow-y: auto;
    }
    
    /* Tournament Notices Mobile Styling */
    @media (max-width: 768px) {
      .border-l-4 {
        border-left-width: 3px !important;
      }
      
      .space-y-4 > div {
        margin-bottom: 0.75rem !important;
      }
      
      .space-y-4 > div:last-child {
        margin-bottom: 0 !important;
      }
      
      .p-4 {
        padding: 0.75rem !important;
      }
      
      .text-2xl {
        font-size: 1.5rem !important;
      }
      
      .text-sm {
        font-size: 0.75rem !important;
      }
      
      .text-xs {
        font-size: 0.625rem !important;
      }
    }
    
    /* Custom scrollbar styling for desktop */
    #modal-content::-webkit-scrollbar {
      width: 8px;
    }
    #modal-content::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 4px;
    }
    #modal-content::-webkit-scrollbar-thumb {
      background: #cbd5e0;
      border-radius: 4px;
    }
    #modal-content::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }
    
    /* Firefox scrollbar */
    #modal-content {
      scrollbar-width: thin;
      scrollbar-color: #cbd5e0 #f1f5f9;
    }
    
    /* Mobile-specific modal fixes */
    @media (max-width: 768px) {
      #tournament-modal {
        align-items: flex-start;
        padding: 1rem;
      }
      
      #modal-content {
        max-height: 90vh;
        margin-top: 2rem;
        margin-bottom: 2rem;
      }
      
      #modal-body {
        padding: 1rem;
      }
      
      /* Thinner scrollbar for mobile */
      #modal-content::-webkit-scrollbar {
        width: 4px;
      }
      #modal-content::-webkit-scrollbar-thumb {
        border-radius: 2px;
      }
    }
    
    @media (max-height: 700px) {
      #modal-content {
        max-height: 85vh;
      }
    }
    
    /* Very tall content handling */
    @media (min-height: 900px) {
      #modal-content {
        max-height: 85vh;
      }
    }
    
    /* Mobile responsive adjustments for navbar */
    @media (max-width: 640px) {
      .tournament-hero {
        padding-top: 6rem !important; /* 96px for mobile */
      }
    }
    
    @media (min-width: 641px) and (max-width: 1024px) {
      .tournament-hero {
        padding-top: 6.5rem !important; /* 104px for tablet */
      }
    }
    
    @media (min-width: 1025px) {
      .tournament-hero {
        padding-top: 7rem !important; /* 112px for desktop */
      }
    }
  </style>
</head>
<body class="bg-gray-50">
  <%- include('../partials/header') %>
  
  <!-- Hero Section -->
  <section class="tournament-hero text-white py-20">
    <div class="container mx-auto px-4 text-center relative z-10">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-5xl md:text-7xl font-bold mb-6 slide-in">
          <i class="fas fa-trophy mr-4 text-yellow-300"></i>
          2025 Tournament Calendar
        </h1>
        <p class="text-xl md:text-2xl mb-8 opacity-90 fade-in">
          Discover exciting pickleball tournaments across Malaysia
        </p>
        
        <!-- Enhanced Stats Grid -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12 fade-in">
          <div class="bg-white bg-opacity-20 backdrop-blur-md rounded-2xl p-6 text-center transform hover:scale-105 transition-all duration-300">
            <div class="text-4xl font-bold text-yellow-300 mb-2"><%= tournaments.length %></div>
            <div class="text-sm opacity-90">Total Tournaments</div>
            <div class="text-xs opacity-70 mt-2">Scheduled for 2025</div>
          </div>
          <div class="bg-white bg-opacity-20 backdrop-blur-md rounded-2xl p-6 text-center transform hover:scale-105 transition-all duration-300">
            <div class="text-4xl font-bold text-yellow-300 mb-2">4</div>
            <div class="text-sm opacity-90">Tournament Types</div>
            <div class="text-xs opacity-70 mt-2">Local to International</div>
          </div>
          <div class="bg-white bg-opacity-20 backdrop-blur-md rounded-2xl p-6 text-center transform hover:scale-105 transition-all duration-300">
            <div class="text-4xl font-bold text-yellow-300 mb-2">12</div>
            <div class="text-sm opacity-90">Months Coverage</div>
            <div class="text-xs opacity-70 mt-2">Year-round Events</div>
          </div>
        </div>

        <!-- Quick Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center mt-8">
          <a href="#calendar-view" class="bg-white bg-opacity-20 backdrop-blur-md text-white px-8 py-3 rounded-full font-semibold hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
            <i class="fas fa-calendar-alt mr-2"></i>
            View Calendar
          </a>
          <a href="/tournament/download-pdf" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-full font-semibold transition-all duration-300 flex items-center justify-center shadow-lg">
            <i class="fas fa-download mr-2"></i>
            Auto PDF
          </a>
          <a href="/tournament/print-pdf" target="_blank" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-full font-semibold transition-all duration-300 flex items-center justify-center shadow-lg">
            <i class="fas fa-print mr-2"></i>
            Print PDF
          </a>
        </div>
      </div>
    </div>
  </section>

  <main class="py-12 tournament-page">
    <div class="container mx-auto px-4 max-w-7xl">
      
      <!-- Enhanced Control Panel -->
      <div class="mb-8 space-y-6">
        
        <!-- Header Section -->
        <div class="text-center mb-6">
          <h2 class="text-3xl font-bold text-gray-800 mb-2">Tournament Management</h2>
        </div>

        <!-- Mobile Action Bar -->
        <div class="md:hidden bg-gradient-to-r from-gray-50 to-white rounded-2xl shadow-lg border p-4 mb-4">
          <div class="flex items-center justify-between">
            <!-- Stats -->
            <div class="flex items-center gap-4">
              <div class="text-center">
                <div class="text-lg font-bold text-indigo-600"><%= tournaments.length %></div>
                <div class="text-xs text-gray-500">Events</div>
              </div>
              <div class="text-center">
                <div class="text-lg font-bold text-purple-600">5</div>
                <div class="text-xs text-gray-500">Types</div>
              </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="flex gap-2">
              <a href="/tournament/download-pdf" 
                 id="download-pdf-btn"
                 class="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-4 py-3 rounded-xl font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center group">
                <i class="fas fa-download text-sm group-hover:animate-bounce"></i>
                <span class="ml-2 text-sm">PDF</span>
              </a>
              <a href="/tournament/print-pdf" 
                 target="_blank"
                 class="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white px-4 py-3 rounded-xl font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center group">
                <i class="fas fa-print text-sm group-hover:animate-bounce"></i>
                <span class="ml-2 text-sm">Print</span>
              </a>
            </div>
          </div>
        </div>
        
        <!-- Desktop Main Controls -->
        <div class="hidden md:block bg-white rounded-2xl shadow-xl p-6 border">
          <div class="flex flex-col lg:flex-row justify-between items-center gap-6">
            
            <!-- Left: Download Options -->
            <div class="flex items-center gap-3">
              <a href="/tournament/download-pdf" 
                 id="download-pdf-btn-desktop"
                 class="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-6 py-4 rounded-2xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center group">
                <i class="fas fa-download mr-2 group-hover:animate-bounce"></i>
                <span class="hidden sm:inline">Auto PDF</span>
                <span class="sm:hidden">PDF</span>
              </a>
              
              <a href="/tournament/print-pdf" 
                 target="_blank"
                 class="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white px-6 py-4 rounded-2xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 flex items-center group">
                <i class="fas fa-print mr-2 group-hover:animate-bounce"></i>
                <span class="hidden sm:inline">Print PDF</span>
                <span class="sm:hidden">Print</span>
              </a>
            </div>

            <!-- Right: Stats -->
            <div class="hidden lg:flex items-center gap-6 text-center">
              <div class="text-center">
                <div class="text-2xl font-bold text-indigo-600"><%= tournaments.length %></div>
                <div class="text-xs text-gray-500">Events</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-purple-600">6</div>
                <div class="text-xs text-gray-500">Types</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Filter Panel -->
        <div class="bg-white rounded-2xl shadow-lg border overflow-hidden">
          <!-- Mobile Filter Header -->
          <div class="md:hidden bg-gradient-to-r from-blue-500 to-indigo-600 text-white p-4">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <i class="fas fa-filter mr-2"></i>
                <span class="font-semibold">Filter Tournaments</span>
              </div>
              <button id="mobile-filter-toggle" class="text-white hover:text-blue-200 transition-colors">
                <i class="fas fa-chevron-down transform transition-transform duration-200"></i>
              </button>
            </div>
          </div>
          
          <!-- Filter Content -->
          <div id="filter-content" class="p-4 md:p-6">
            <!-- Desktop Filter Header -->
            <div class="hidden md:flex items-center text-gray-700 font-semibold mb-4">
              <i class="fas fa-filter mr-2 text-blue-500"></i>
              <span>Filter Tournaments:</span>
            </div>
            
            <!-- Filter Buttons -->
            <div class="grid grid-cols-2 md:flex md:flex-wrap gap-2 md:gap-3">
              <button class="filter-btn active col-span-2 md:col-span-1 px-3 py-2.5 md:px-4 md:py-2 rounded-full bg-indigo-500 text-white shadow-md font-medium text-sm hover:shadow-lg transition-all duration-300 transform hover:scale-105" data-filter="all">
                <i class="fas fa-globe mr-1 md:mr-2"></i>
                <span class="hidden sm:inline">All Types</span>
                <span class="sm:hidden">All</span>
              </button>
              <button class="filter-btn px-3 py-2.5 md:px-4 md:py-2 rounded-full bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-green-200 hover:border-green-400 hover:shadow-lg transition-all duration-300 transform hover:scale-105" data-filter="local">
                <i class="fas fa-map-marker-alt mr-1 md:mr-2 text-green-500"></i>
                <span>Local</span>
              </button>
              <button class="filter-btn px-3 py-2.5 md:px-4 md:py-2 rounded-full bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-red-200 hover:border-red-400 hover:shadow-lg transition-all duration-300 transform hover:scale-105" data-filter="state">
                <i class="fas fa-flag mr-1 md:mr-2 text-red-500"></i>
                <span>State</span>
              </button>
              <button class="filter-btn px-3 py-2.5 md:px-4 md:py-2 rounded-full bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-blue-200 hover:border-blue-400 hover:shadow-lg transition-all duration-300 transform hover:scale-105" data-filter="national">
                <i class="fas fa-star mr-1 md:mr-2 text-blue-500"></i>
                <span>National</span>
              </button>
              <button class="filter-btn px-3 py-2.5 md:px-4 md:py-2 rounded-full bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-orange-200 hover:border-orange-400 hover:shadow-lg transition-all duration-300 transform hover:scale-105" data-filter="international">
                <i class="fas fa-globe mr-1 md:mr-2 text-orange-500"></i>
                <span>International</span>
              </button>

            </div>
          </div>
        </div>
      </div>

      <!-- Tournament Notices Section -->
      <div class="bg-white rounded-2xl shadow-xl p-6 mb-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold text-gray-800 flex items-center">
            <i class="fas fa-bell text-orange-500 mr-3"></i>
            Tournament Notices
          </h2>
          <div class="text-sm text-gray-500">
            <i class="fas fa-info-circle mr-1"></i>
            Important updates about tournaments
          </div>
        </div>
        
        <!-- Notice Cards -->
        <div id="noticesContainer" class="space-y-4">
          <!-- Notices will be loaded here dynamically -->
        </div>
        
        <!-- No Notices State -->
        <div class="text-center py-8 hidden" id="noNoticesState">
          <div class="text-4xl mb-4">📢</div>
          <h3 class="text-lg font-semibold text-gray-600 mb-2">No notices yet</h3>
          <p class="text-gray-500">All tournaments are running as scheduled</p>
        </div>
      </div>

      <!-- Calendar View -->
      <div id="calendar-view" class="bg-white rounded-2xl shadow-xl overflow-hidden fade-in">
        <div class="p-6 bg-gradient-to-r from-indigo-500 to-purple-600 text-white">
          <h2 class="text-3xl font-bold">
            <i class="fas fa-calendar-check mr-3"></i>Tournament Calendar
          </h2>
          <!-- Mobile View Toggle -->
          <div class="mt-4 flex items-center justify-between">
            <div class="hidden md:block text-sm opacity-90">
              Scroll horizontally to view all months
            </div>
            <div class="md:hidden">
              <button id="mobile-view-toggle" class="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                <i class="fas fa-list mr-2"></i>Switch to List View
              </button>
            </div>
          </div>
        </div>
        
        <!-- Desktop Calendar Grid -->
        <div class="calendar-grid-wrapper hidden md:block">
          <div class="calendar-grid">
            <!-- Header Row -->
            <div class="grid-header-corner">
              <i class="fas fa-trophy mr-2"></i>Tournament
            </div>
            <% const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; %>
            <% months.forEach(month => { %>
              <div class="grid-month-header"><%= month %></div>
            <% }); %>
            
            <!-- Sub-header Row -->
            <div class="grid-subheader-corner"></div>
            <% for (let i = 0; i < months.length; i++) { %>
              <div class="grid-quarter-header">
                <span>W1</span>
                <span>W2</span>
                <span>W3</span>
                <span>W4</span>
              </div>
            <% } %>
            
            <!-- Tournament Rows -->
            <% 
              // Enhanced tournament positioning with spanning support
              const tournamentData = tournaments.map(t => {
                const schedule = Array(12).fill().map(() => ({})); // Change to object to store more data
                
                if (t.startDate) {
                  const start = new Date(t.startDate);
                  const end = t.endDate ? new Date(t.endDate) : new Date(t.startDate);
                  
                  // Get start and end months
                  const startMonth = start.getMonth();
                  const endMonth = end.getMonth();
                  
                  // Helper function to get the week number within a month (1-5)
                  const getWeekInMonth = (date) => {
                    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
                    const firstWeekday = firstDay.getDay(); // 0 = Sunday, 1 = Monday, etc.
                    const dayOfMonth = date.getDate();
                    return Math.ceil((dayOfMonth + firstWeekday) / 7);
                  };
                  
                  // Better quarter calculation based on weeks
                  const getQuarterFromWeek = (week) => {
                    if (week <= 1) return 1;
                    if (week <= 2) return 2;
                    if (week <= 3) return 3;
                    return 4;
                  };
                  
                  // Calculate spanning information
                  if (startMonth === endMonth) {
                    // Tournament within same month
                    const startWeek = getWeekInMonth(start);
                    const endWeek = getWeekInMonth(end);
                    const startQuarter = getQuarterFromWeek(startWeek);
                    const endQuarter = getQuarterFromWeek(endWeek);
                    
                    if (!schedule[startMonth]) schedule[startMonth] = {};
                    
                    if (startQuarter === endQuarter) {
                      // Single quarter tournament
                      schedule[startMonth][startQuarter] = {
                        type: 'single',
                        start: true,
                        end: true,
                        duration: Math.max(1, end.getDate() - start.getDate() + 1)
                      };
                    } else {
                      // Multi-quarter tournament within same month
                      for (let q = startQuarter; q <= endQuarter; q++) {
                        schedule[startMonth][q] = {
                          type: 'span',
                          start: q === startQuarter,
                          end: q === endQuarter,
                          middle: q > startQuarter && q < endQuarter,
                          duration: Math.max(1, end.getDate() - start.getDate() + 1)
                        };
                      }
                    }
                  } else {
                    // Tournament spans multiple months
                    for (let m = startMonth; m <= endMonth; m++) {
                      if (!schedule[m]) schedule[m] = {};
                      
                      if (m === startMonth) {
                        // Starting month
                        const startWeek = getWeekInMonth(start);
                        const startQuarter = getQuarterFromWeek(startWeek);
                        for (let q = startQuarter; q <= 4; q++) {
                          schedule[m][q] = {
                            type: 'span',
                            start: q === startQuarter,
                            end: false,
                            middle: q > startQuarter,
                            monthSpan: 'start'
                          };
                        }
                      } else if (m === endMonth) {
                        // Ending month
                        const endWeek = getWeekInMonth(end);
                        const endQuarter = getQuarterFromWeek(endWeek);
                        for (let q = 1; q <= endQuarter; q++) {
                          schedule[m][q] = {
                            type: 'span',
                            start: false,
                            end: q === endQuarter,
                            middle: q < endQuarter,
                            monthSpan: 'end'
                          };
                        }
                      } else {
                        // Middle months - fill all quarters
                        for (let q = 1; q <= 4; q++) {
                          schedule[m][q] = {
                            type: 'span',
                            start: false,
                            end: false,
                            middle: true,
                            monthSpan: 'middle'
                          };
                        }
                      }
                    }
                  }
                }
                
                return {
                  name: t.name,
                  type: t.type,
                  startDate: t.startDate,
                  endDate: t.endDate,
                  color: `filled-${t.color}`,
                  schedule
                };
              });
            %>
            <% if (tournamentData && tournamentData.length) { %>
              <% tournamentData.forEach((t, index) => { %>
                <!-- Tournament Name Cell -->
                <div class="grid-tournament-name tournament-clickable" data-type="<%= t.type %>" data-tournament-index="<%= index %>">
                  <div class="flex items-start">
                    <i class="fas fa-trophy mr-3 text-yellow-500 mt-1"></i>
                    <div>
                      <div class="font-medium text-gray-800 text-sm leading-tight">
                        <span title="<%= t.name %>"><%= t.name %></span>
                      </div>
                      <div class="text-xs text-gray-500 mt-1">
                        <% if (t.startDate) { %>
                          <% const startDate = new Date(t.startDate); %>
                          <% const endDate = t.endDate ? new Date(t.endDate) : null; %>
                          <% const startDay = startDate.getDate(); %>
                          <% const startMonth = startDate.toLocaleDateString('en-US', { month: 'short' }); %>
                          <% const startYear = startDate.getFullYear(); %>
                          <% if (endDate && endDate.getTime() !== startDate.getTime()) { %>
                            <% const endDay = endDate.getDate(); %>
                            <%= startDay %> - <%= endDay %> <%= startMonth %> <%= startYear %>
                          <% } else { %>
                            <%= startDay %> <%= startMonth %> <%= startYear %>
                          <% } %>
                        <% } else { %>
                          Date TBD
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Month Cells -->
                <% for (let m = 0; m < months.length; m++) { %>
                  <div class="grid-month-cell">
                    <% for (let q = 1; q <= 4; q++) { %>
                      <% 
                        let cellClass = "grid-quarter-cell";
                        let cellData = t.schedule && t.schedule[m] && t.schedule[m][q];
                        let hasEvent = !!cellData;
                        let spanClass = "";
                        let iconClass = "fas fa-circle";
                        
                        if (hasEvent) {
                          cellClass += ` ${t.color}`;
                          
                          // Add spanning classes for visual effects
                          if (cellData.type === 'span') {
                            if (cellData.start && !cellData.end) {
                              spanClass = " span-start";
                              iconClass = "fas fa-play";
                            } else if (cellData.end && !cellData.start) {
                              spanClass = " span-end"; 
                              iconClass = "fas fa-stop";
                            } else if (cellData.middle) {
                              spanClass = " span-middle";
                              iconClass = "fas fa-minus";
                            } else if (cellData.start && cellData.end) {
                              spanClass = " span-complete";
                              iconClass = "fas fa-circle";
                            }
                          }
                          
                          cellClass += spanClass;
                        }
                      %>
                      <div class="<%= cellClass %> <% if (hasEvent) { %>tournament-clickable<% } %>" 
                           <% if (hasEvent) { %>
                           data-tournament-index="<%= index %>"
                           data-span-type="<%= cellData.type || 'single' %>"
                           data-span-position="<%= cellData.start ? 'start' : (cellData.end ? 'end' : (cellData.middle ? 'middle' : 'single')) %>"
                           title="<%= t.name %><%= cellData.duration ? ' (' + cellData.duration + ' days)' : '' %>"
                           <% } %>>
                        <% if (hasEvent) { %>
                          <!-- Clean filled cell without icons -->
                        <% } %>
                      </div>
                    <% } %>
                  </div>
                <% } %>
              <% }) %>
            <% } else { %>
              <div class="grid-no-tournaments">
                <i class="fas fa-calendar-times text-4xl mb-4 block"></i>
                No tournaments scheduled.
              </div>
            <% } %>
          </div>
        </div>
        
        <!-- Mobile Tournament List View -->
        <div id="mobile-tournament-list" class="md:hidden">
          <div class="p-4">
            <div class="space-y-4">
              <% if (tournamentData && tournamentData.length) { %>
                <% tournamentData.forEach((t, index) => { %>
                  <div class="mobile-tournament-card tournament-clickable bg-gradient-to-r from-gray-50 to-white border border-gray-200 rounded-xl p-4 shadow-sm" 
                       data-type="<%= t.type %>" data-tournament-index="<%= index %>">
                    <div class="flex items-start justify-between">
                      <div class="flex-1">
                        <div class="flex items-center mb-2">
                          <div class="w-3 h-3 rounded-full mr-3 <%= t.color %>"></div>
                          <h3 class="font-semibold text-gray-800 text-sm leading-tight">
                            <%= t.name %>
                          </h3>
                        </div>
                        <div class="text-xs text-gray-600 mb-2">
                          <% if (t.startDate) { %>
                            <% const startDate = new Date(t.startDate); %>
                            <% const endDate = t.endDate ? new Date(t.endDate) : null; %>
                            <% const startDay = startDate.getDate(); %>
                            <% const startMonth = startDate.toLocaleDateString('en-US', { month: 'short' }); %>
                            <% const startYear = startDate.getFullYear(); %>
                            <i class="fas fa-calendar-alt mr-1 text-blue-500"></i>
                            <% if (endDate && endDate.getTime() !== startDate.getTime()) { %>
                              <% const endDay = endDate.getDate(); %>
                              <%= startDay %> - <%= endDay %> <%= startMonth %> <%= startYear %>
                            <% } else { %>
                              <%= startDay %> <%= startMonth %> <%= startYear %>
                            <% } %>
                          <% } else { %>
                            <i class="fas fa-calendar-alt mr-1 text-gray-400"></i>Date TBD
                          <% } %>
                        </div>
                        <div class="flex items-center">
                          <span class="px-2 py-1 rounded-full text-xs font-medium
                            <%= t.type === 'local' ? 'bg-green-100 text-green-800' : 
                                t.type === 'state' ? 'bg-red-100 text-red-800' : 
                                t.type === 'national' ? 'bg-blue-100 text-blue-800' : 
                                t.type === 'international' ? 'bg-orange-100 text-orange-800' :
                                t.type === 'sarawak' ? 'bg-purple-100 text-purple-800' :
                                t.type === 'wmalaysia' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-gray-100 text-gray-800' %>">
                            <%= t.type ? t.type.toUpperCase() : 'GENERAL' %>
                          </span>
                        </div>
                      </div>
                      <div class="ml-3">
                        <i class="fas fa-chevron-right text-gray-400"></i>
                      </div>
                    </div>
                  </div>
                <% }) %>
              <% } else { %>
                <div class="text-center py-12">
                  <i class="fas fa-calendar-times text-4xl text-gray-300 mb-4"></i>
                  <p class="text-gray-500">No tournaments scheduled</p>
                </div>
              <% } %>
            </div>
          </div>
        </div>
        
        <!-- Mobile Calendar Grid (Compact) -->
        <div id="mobile-calendar-grid" class="md:hidden hidden">
          <div class="p-4">
            <div class="text-xs text-gray-600 mb-4 text-center">
              <i class="fas fa-info-circle mr-1"></i>
              Swipe left/right to navigate months
            </div>
            <div class="mobile-calendar-container">
              <% months.forEach((month, monthIndex) => { %>
                <div class="mobile-month-view <%= monthIndex === 0 ? 'active' : '' %>" data-month="<%= monthIndex %>">
                  <div class="bg-gradient-to-r from-indigo-500 to-purple-600 text-white p-3 rounded-t-lg">
                    <h3 class="font-bold text-center"><%= month %> 2025</h3>
                  </div>
                  <div class="bg-white border-l border-r border-b border-gray-200 rounded-b-lg">
                    <% if (tournamentData && tournamentData.length) { %>
                      <% let hasEventsThisMonth = false; %>
                      <% tournamentData.forEach((t, index) => { %>
                        <% if (t.schedule && t.schedule[monthIndex] && Object.keys(t.schedule[monthIndex]).length > 0) { %>
                          <% hasEventsThisMonth = true; %>
                          <div class="p-3 border-b border-gray-100 last:border-b-0 tournament-clickable" data-tournament-index="<%= index %>">
                            <div class="flex items-center">
                              <div class="w-2 h-2 rounded-full mr-3 <%= t.color %>"></div>
                              <div class="flex-1">
                                <div class="font-medium text-sm text-gray-800"><%= t.name %></div>
                                <div class="text-xs text-gray-500 mt-1">
                                  <% if (t.startDate) { %>
                                    <% const startDate = new Date(t.startDate); %>
                                    <% if (startDate.getMonth() === monthIndex) { %>
                                      <%= startDate.getDate() %> <%= startDate.toLocaleDateString('en-US', { month: 'short' }) %>
                                    <% } %>
                                  <% } %>
                                </div>
                              </div>
                              <div class="text-xs text-gray-400">
                                <% const quarters = Object.keys(t.schedule[monthIndex]).map(q => parseInt(q)).sort(); %>
                                <% if (quarters.length > 0) { %>
                                  Q<%= quarters.join(', Q') %>
                                <% } %>
                              </div>
                            </div>
                          </div>
                        <% } %>
                      <% }) %>
                      <% if (!hasEventsThisMonth) { %>
                        <div class="p-6 text-center text-gray-400">
                          <i class="fas fa-calendar-times text-2xl mb-2"></i>
                          <p class="text-sm">No events this month</p>
                        </div>
                      <% } %>
                    <% } else { %>
                      <div class="p-6 text-center text-gray-400">
                        <i class="fas fa-calendar-times text-2xl mb-2"></i>
                        <p class="text-sm">No events this month</p>
                      </div>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
            
            <!-- Month Navigation -->
            <div class="flex justify-center items-center mt-4 space-x-4">
              <button id="prev-month" class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors">
                <i class="fas fa-chevron-left text-gray-600"></i>
              </button>
              <div id="month-indicator" class="text-sm font-medium text-gray-700">
                January 2025
              </div>
              <button id="next-month" class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors">
                <i class="fas fa-chevron-right text-gray-600"></i>
              </button>
            </div>
          </div>
        </div>
      </div>


    </div>
  </main>

  <!-- Tournament Modal -->
  <div id="tournament-modal" class="modal fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
    <div class="bg-white rounded-2xl max-w-2xl w-full max-h-90vh overflow-y-auto transform scale-95 opacity-0 transition-all duration-300" id="modal-content">
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-bold text-gray-800" id="modal-title">Tournament Details</h2>
          <button class="close-tournament-modal text-gray-500 hover:text-gray-700 text-2xl">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div class="p-6" id="modal-body">
        <!-- Modal content will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  
  <style>
    /* Calendar Grid Wrapper */
    .calendar-grid-wrapper {
      overflow: auto;
      max-height: 80vh;
      position: relative;
      border: 1px solid #e5e7eb;
    }
    
    /* CSS Grid Layout */
    .calendar-grid {
      display: grid;
      grid-template-columns: 300px repeat(12, 1fr);
      min-width: 1600px;
    }
    
    /* Header Corner */
    .grid-header-corner {
      position: sticky;
      top: 0;
      left: 0;
      z-index: 40;
      background: #f9fafb;
      padding: 16px;
      font-weight: 600;
      color: #374151;
      border-right: 2px solid #e5e7eb;
      border-bottom: 1px solid #e5e7eb;
      display: flex;
      align-items: center;
    }
    
    /* Month Headers */
    .grid-month-header {
      position: sticky;
      top: 0;
      z-index: 30;
      background: #f9fafb;
      padding: 12px 8px;
      text-align: center;
      font-weight: 600;
      color: #374151;
      border-right: 1px solid #e5e7eb;
      border-bottom: 1px solid #e5e7eb;
    }
    
    /* Subheader Corner */
    .grid-subheader-corner {
      position: sticky;
      top: 48px;
      left: 0;
      z-index: 35;
      background: #f3f4f6;
      border-right: 2px solid #e5e7eb;
      border-bottom: 2px solid #e5e7eb;
    }
    
    /* Quarter Headers */
    .grid-quarter-header {
      position: sticky;
      top: 48px;
      z-index: 25;
      background: #f3f4f6;
      padding: 8px 4px;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1px;
      border-right: 1px solid #e5e7eb;
      border-bottom: 2px solid #e5e7eb;
    }
    
    .grid-quarter-header span {
      text-align: center;
      font-size: 0.75rem;
      color: #6b7280;
      border-right: 1px solid #e5e7eb;
    }
    
    .grid-quarter-header span:last-child {
      border-right: none;
    }
    
    /* Tournament Name Cells */
    .grid-tournament-name {
      position: sticky;
      left: 0;
      z-index: 20;
      background: white;
      padding: 16px;
      border-right: 2px solid #e5e7eb;
      border-bottom: 1px solid #e5e7eb;
      cursor: pointer;
      transition: background-color 0.2s;
      word-wrap: break-word;
      overflow-wrap: break-word;
      hyphens: auto;
    }
    
    .grid-tournament-name:hover {
      background-color: #eff6ff;
    }
    
    /* Month Cells */
    .grid-month-cell {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1px;
      border-right: 1px solid #e5e7eb;
      border-bottom: 1px solid #e5e7eb;
      padding: 2px;
    }
    
    /* Quarter Cells */
    .grid-quarter-cell {
      padding: 8px;
      text-align: center;
      position: relative;
      transition: all 0.2s ease;
      cursor: pointer;
      min-height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .grid-quarter-cell:hover {
      transform: scale(1.1);
      z-index: 10;
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    
    /* Color classes for tournament types */
    .filled-green {
      background-color: #10b981;
      color: white;
      border-radius: 6px;
    }
    
    .filled-red {
      background-color: #ef4444;
      color: white;
      border-radius: 6px;
    }
    
    .filled-blue {
      background-color: #3b82f6;
      color: white;
      border-radius: 6px;
    }
    
    .filled-purple {
      background-color: #8b5cf6;
      color: white;
      border-radius: 6px;
    }
    
    .filled-orange {
      background-color: #f97316;
      color: white;
      border-radius: 6px;
    }
    
    /* Spanning tournament styles */
    .span-start {
      border-top-left-radius: 6px !important;
      border-bottom-left-radius: 6px !important;
      border-top-right-radius: 0 !important;
      border-bottom-right-radius: 0 !important;
      margin-right: -1px;
      position: relative;
      z-index: 5;
    }
    
    /* Removed connecting gradient */
    
    .span-middle {
      border-radius: 0 !important;
      margin-left: -1px;
      margin-right: -1px;
      position: relative;
      z-index: 4;
    }
    
    /* Removed middle connecting gradients */
    
    .span-end {
      border-top-right-radius: 6px !important;
      border-bottom-right-radius: 6px !important;
      border-top-left-radius: 0 !important;
      border-bottom-left-radius: 0 !important;
      margin-left: -1px;
      position: relative;
      z-index: 5;
    }
    
    /* Removed end connecting gradient */
    
    .span-complete {
      border-radius: 6px !important;
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);
    }
    
    /* Enhanced hover effects for spanning tournaments */
    .span-start:hover,
    .span-middle:hover,
    .span-end:hover,
    .span-complete:hover {
      transform: scale(1.05);
      z-index: 15 !important;
      box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }
    
    /* Removed glow animation for connecting gradients */
    
    /* No tournaments message */
    .grid-no-tournaments {
      grid-column: 1 / -1;
      padding: 32px;
      text-align: center;
      color: #9ca3af;
    }
    
    /* Shadow effects for sticky elements */
    .grid-header-corner::after,
    .grid-subheader-corner::after {
      content: '';
      position: absolute;
      top: 0;
      right: -5px;
      bottom: 0;
      width: 5px;
      background: linear-gradient(to right, rgba(0,0,0,0.1), transparent);
      pointer-events: none;
    }
    
    .grid-tournament-name::after {
      content: '';
      position: absolute;
      top: 0;
      right: -5px;
      bottom: 0;
      width: 5px;
      background: linear-gradient(to right, rgba(0,0,0,0.08), transparent);
      pointer-events: none;
    }
    
    /* Row highlighting on hover */
    .grid-tournament-name:hover ~ .grid-month-cell,
    .grid-month-cell:hover {
      background-color: #fafbfc;
    }
    
    /* Hide tournaments based on filter */
    .grid-tournament-name.hidden,
    .grid-tournament-name.hidden ~ .grid-month-cell {
      display: none;
    }
    
    /* Mobile Styles */
    @media (max-width: 768px) {
      .calendar-grid-wrapper {
        max-height: none;
      }
      
      /* Mobile Action Bar */
      .mobile-action-bar {
        background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
        border: 1px solid #e2e8f0;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      /* Mobile Filter Panel */
      #filter-content {
        transition: all 0.3s ease-in-out;
      }
      
      .filter-btn {
        font-size: 0.875rem;
        padding: 0.625rem 0.75rem;
        min-height: 44px; /* Touch-friendly minimum */
      }
      
      /* Mobile Tournament Cards */
      .mobile-tournament-card {
        cursor: pointer;
        transition: all 0.2s ease;
        background: linear-gradient(135deg, #f9fafb 0%, #ffffff 100%);
        border: 1px solid #e5e7eb;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      }
      
      .mobile-tournament-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        border-color: #d1d5db;
      }
      
      .mobile-tournament-card:active {
        transform: translateY(0);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      }
      
      /* Mobile Calendar Container */
      .mobile-calendar-container {
        position: relative;
        overflow: hidden;
        border-radius: 0.75rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .mobile-month-view {
        display: none;
        animation: slideIn 0.3s ease-in-out;
      }
      
      .mobile-month-view.active {
        display: block;
      }
      
      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateX(20px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }
      
      /* Enhanced mobile typography */
      .mobile-tournament-card h3 {
        font-size: 0.9rem;
        line-height: 1.3;
        font-weight: 600;
      }
      
      /* Color dots for mobile */
      .filled-green {
        background-color: #10b981;
      }
      
      .filled-red {
        background-color: #ef4444;
      }
      
      .filled-blue {
        background-color: #3b82f6;
      }
      
      .filled-purple {
        background-color: #8b5cf6;
      }
      
      .filled-orange {
        background-color: #f97316;
      }
      
      /* Mobile navigation improvements */
      #prev-month, #next-month {
        min-width: 44px;
        min-height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      /* Mobile view toggle button */
      #mobile-view-toggle {
        min-height: 44px;
        font-size: 0.875rem;
        padding: 0.75rem 1rem;
      }
      
      /* Improved spacing for mobile */
      .container {
        padding-left: 1rem;
        padding-right: 1rem;
      }
      
      /* Mobile legend improvements */
      .legend .grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      .legend .group {
        padding: 1rem;
      }
    }
  </style>
  
  <script src="/js/script.js"></script>
  <script>
    // Tournament data for JavaScript (simplified for calendar)
    const tournamentData = <%- JSON.stringify(tournamentData) %>;
    // Full tournament data with all fields for modal
    const fullTournamentData = <%- JSON.stringify(tournaments) %>;
    
    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Tournament page loaded, setting up filters
      
      // Add event listeners for tournament clicks (CSP compliant)
      document.querySelectorAll('.tournament-clickable').forEach(element => {
        element.addEventListener('click', function() {
          const index = this.dataset.tournamentIndex;
          if (index !== undefined) {
            openTournamentModal(parseInt(index));
          }
        });
      });
      
      // Add event listener for close modal button
      document.querySelector('.close-tournament-modal').addEventListener('click', closeTournamentModal);
      
      // Mobile functionality
      setupMobileView();
      setupMobileFilter();
      


      // Enhanced filter functionality
      const filterButtons = document.querySelectorAll('.filter-btn');
              // Found filter buttons
      
      filterButtons.forEach(btn => {
              btn.addEventListener('click', function() {
          // Filter button clicked
          
          // Update active filter with enhanced styling
          document.querySelectorAll('.filter-btn').forEach(b => {
            b.classList.remove('active');
            if (b !== this) {
              // Reset non-active buttons
              b.classList.remove('bg-indigo-500', 'text-white');
              b.classList.add('bg-white', 'text-gray-700');
            }
          });
          
          // Style active button
          this.classList.add('active', 'bg-indigo-500', 'text-white');
          this.classList.remove('bg-white', 'text-gray-700');
          
          const filter = this.dataset.filter;
          // Applying filter
        
        // Filter grid elements
        const filterGridElements = (filter) => {
          const tournamentNames = document.querySelectorAll('.grid-tournament-name');
          let visibleCount = 0;
          
          tournamentNames.forEach((nameCell, index) => {
            const shouldShow = filter === 'all' || nameCell.dataset.type === filter;
            
            // Get all month cells for this tournament (next 12 siblings)
            const monthCells = [];
            let sibling = nameCell.nextElementSibling;
            for (let i = 0; i < 12 && sibling; i++) {
              if (sibling.classList.contains('grid-month-cell')) {
                monthCells.push(sibling);
              }
              sibling = sibling.nextElementSibling;
            }
            
            if (shouldShow) {
              // Show tournament
              nameCell.classList.remove('hidden');
              nameCell.style.display = '';
              monthCells.forEach(cell => {
                cell.classList.remove('hidden');
                cell.style.display = '';
              });
              visibleCount++;
            } else {
              // Hide tournament
              nameCell.classList.add('hidden');
              nameCell.style.display = 'none';
              monthCells.forEach(cell => {
                cell.classList.add('hidden');
                cell.style.display = 'none';
              });
            }
          });
          
          // Show/hide no tournaments message
          const noTournamentsMsg = document.querySelector('.grid-no-tournaments');
          if (noTournamentsMsg) {
            if (visibleCount === 0) {
              noTournamentsMsg.style.display = '';
            } else {
              noTournamentsMsg.style.display = 'none';
            }
          }
        };
        
        // Apply filter
        filterGridElements(filter);
        });
      });
      
      // Initialize filters - show all by default
      const allTournamentNames = document.querySelectorAll('.grid-tournament-name');
    });
    
    // Mobile view functionality
    function setupMobileView() {
      const mobileViewToggle = document.getElementById('mobile-view-toggle');
      const mobileListView = document.getElementById('mobile-tournament-list');
      const mobileCalendarView = document.getElementById('mobile-calendar-grid');
      const prevMonthBtn = document.getElementById('prev-month');
      const nextMonthBtn = document.getElementById('next-month');
      const monthIndicator = document.getElementById('month-indicator');
      
      let currentView = 'list'; // 'list' or 'calendar'
      let currentMonth = 0;
      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      
      // Toggle between list and calendar view
      if (mobileViewToggle) {
        mobileViewToggle.addEventListener('click', function() {
          if (currentView === 'list') {
            // Switch to calendar view
            mobileListView.classList.add('hidden');
            mobileCalendarView.classList.remove('hidden');
            mobileViewToggle.innerHTML = '<i class="fas fa-list mr-2"></i>Switch to List View';
            currentView = 'calendar';
          } else {
            // Switch to list view
            mobileCalendarView.classList.add('hidden');
            mobileListView.classList.remove('hidden');
            mobileViewToggle.innerHTML = '<i class="fas fa-calendar mr-2"></i>Switch to Calendar View';
            currentView = 'list';
          }
        });
      }
      
      // Month navigation
      function updateMonth() {
        const monthViews = document.querySelectorAll('.mobile-month-view');
        monthViews.forEach((view, index) => {
          if (index === currentMonth) {
            view.classList.add('active');
          } else {
            view.classList.remove('active');
          }
        });
        
        if (monthIndicator) {
          monthIndicator.textContent = months[currentMonth] + ' 2025';
        }
      }
      
      if (prevMonthBtn) {
        prevMonthBtn.addEventListener('click', function() {
          currentMonth = currentMonth > 0 ? currentMonth - 1 : 11;
          updateMonth();
        });
      }
      
      if (nextMonthBtn) {
        nextMonthBtn.addEventListener('click', function() {
          currentMonth = currentMonth < 11 ? currentMonth + 1 : 0;
          updateMonth();
        });
      }
      
      // Touch/swipe support for month navigation
      let startX = 0;
      let endX = 0;
      
      const calendarContainer = document.querySelector('.mobile-calendar-container');
      if (calendarContainer) {
        calendarContainer.addEventListener('touchstart', function(e) {
          startX = e.touches[0].clientX;
        });
        
        calendarContainer.addEventListener('touchend', function(e) {
          endX = e.changedTouches[0].clientX;
          handleSwipe();
        });
        
        function handleSwipe() {
          const threshold = 50; // Minimum swipe distance
          const diff = startX - endX;
          
          if (Math.abs(diff) > threshold) {
            if (diff > 0) {
              // Swipe left - next month
              currentMonth = currentMonth < 11 ? currentMonth + 1 : 0;
            } else {
              // Swipe right - previous month
              currentMonth = currentMonth > 0 ? currentMonth - 1 : 11;
            }
            updateMonth();
          }
        }
      }
      
      // Initialize month display
      updateMonth();
    }
    
    // Mobile filter functionality
    function setupMobileFilter() {
      const filterToggle = document.getElementById('mobile-filter-toggle');
      const filterContent = document.getElementById('filter-content');
      
      if (filterToggle && filterContent) {
        let isExpanded = false;
        
        // Initially hide filter content on mobile
        if (window.innerWidth < 768) {
          filterContent.style.display = 'none';
        }
        
        filterToggle.addEventListener('click', function() {
          const chevron = this.querySelector('i');
          
          if (isExpanded) {
            // Collapse
            filterContent.style.display = 'none';
            chevron.style.transform = 'rotate(0deg)';
            isExpanded = false;
          } else {
            // Expand
            filterContent.style.display = 'block';
            chevron.style.transform = 'rotate(180deg)';
            isExpanded = true;
          }
        });
        
        // Handle window resize
        window.addEventListener('resize', function() {
          if (window.innerWidth >= 768) {
            // Desktop - always show filter content
            filterContent.style.display = 'block';
          } else if (!isExpanded) {
            // Mobile - hide if not expanded
            filterContent.style.display = 'none';
          }
        });
      }
    }

    // Tournament modal functionality
    function openTournamentModal(index) {
      // Use full tournament data instead of simplified tournamentData
      const tournament = fullTournamentData[index];
      const modal = document.getElementById('tournament-modal');
      const modalContent = document.getElementById('modal-content');
      const modalTitle = document.getElementById('modal-title');
      const modalBody = document.getElementById('modal-body');
      
      modalTitle.textContent = tournament.name;
      
      const typeColors = {
        local: 'green',
        state: 'red',
        national: 'blue',
        international: 'orange',
        sarawak: 'purple',
        wmalaysia: 'yellow'
      };
      
      // Calculate duration
      const duration = tournament.startDate && tournament.endDate ? 
        Math.ceil((new Date(tournament.endDate) - new Date(tournament.startDate)) / (1000 * 60 * 60 * 24)) + 1 : null;
      
      const tournamentType = tournament.type || 'local';
      const colorClass = typeColors[tournamentType] || 'blue';
      
      modalBody.innerHTML = `
        <div class="space-y-6">
          <div class="bg-gradient-to-r from-${colorClass}-400 to-${colorClass}-600 text-white p-6 rounded-xl">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-2xl font-bold">${tournament.name}</h3>
                <p class="text-lg opacity-90 capitalize">${tournament.type || 'general'} Tournament</p>
              </div>
              <i class="fas fa-trophy text-4xl opacity-80"></i>
            </div>
          </div>
          
          <!-- Date and Duration Information -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="space-y-4">
              <div class="flex items-center text-gray-700">
                <i class="fas fa-calendar-alt mr-3 text-blue-500"></i>
                <div>
                  <div class="font-semibold">Start Date</div>
                  <div>${tournament.startDate ? new Date(tournament.startDate).toLocaleDateString('en-US', { 
                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' 
                  }) : 'To Be Determined'}</div>
                </div>
              </div>
              
              <div class="flex items-center text-gray-700">
                <i class="fas fa-calendar-check mr-3 text-green-500"></i>
                <div>
                  <div class="font-semibold">End Date</div>
                  <div>${tournament.endDate ? new Date(tournament.endDate).toLocaleDateString('en-US', { 
                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' 
                  }) : 'To Be Determined'}</div>
                </div>
              </div>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center text-gray-700">
                <i class="fas fa-tag mr-3 text-purple-500"></i>
                <div>
                  <div class="font-semibold">Tournament Type</div>
                  <div class="capitalize">${tournament.type || 'general'}</div>
                </div>
              </div>
              
              <div class="flex items-center text-gray-700">
                <i class="fas fa-clock mr-3 text-orange-500"></i>
                <div>
                  <div class="font-semibold">Duration</div>
                  <div>${duration ? duration + ' day' + (duration > 1 ? 's' : '') : 'TBD'}</div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Venue and Location Information -->
          ${tournament.venue || tournament.city ? `
          <div class="bg-blue-50 p-4 rounded-xl">
            <h4 class="font-semibold text-gray-800 mb-3 flex items-center">
              <i class="fas fa-map-marker-alt mr-2 text-blue-500"></i>Location Details
            </h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${tournament.venue ? `
              <div class="flex items-center text-gray-700">
                <i class="fas fa-building mr-3 text-green-500"></i>
                <div>
                  <div class="font-semibold">Venue</div>
                  <div>${tournament.venue}</div>
                </div>
              </div>
              ` : ''}
              ${tournament.city ? `
              <div class="flex items-center text-gray-700">
                <i class="fas fa-city mr-3 text-blue-500"></i>
                <div>
                  <div class="font-semibold">City</div>
                  <div>${tournament.city}</div>
                </div>
              </div>
              ` : ''}
            </div>
          </div>
          ` : ''}
          
          <!-- Organizer and Contact Information -->
          ${tournament.organizer || tournament.personInCharge || tournament.phoneNumber ? `
          <div class="bg-green-50 p-4 rounded-xl">
            <h4 class="font-semibold text-gray-800 mb-3 flex items-center">
              <i class="fas fa-users mr-2 text-green-500"></i>Contact Information
            </h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              ${tournament.organizer ? `
              <div class="flex items-center text-gray-700">
                <i class="fas fa-handshake mr-3 text-purple-500"></i>
                <div>
                  <div class="font-semibold">Organizer</div>
                  <div>${tournament.organizer}</div>
                </div>
              </div>
              ` : ''}
              ${tournament.personInCharge ? `
              <div class="flex items-center text-gray-700">
                <i class="fas fa-user-tie mr-3 text-indigo-500"></i>
                <div>
                  <div class="font-semibold">Person In Charge</div>
                  <div>${tournament.personInCharge}</div>
                </div>
              </div>
              ` : ''}
              ${tournament.phoneNumber ? `
              <div class="flex items-center text-gray-700 md:col-span-2">
                <i class="fas fa-phone mr-3 text-orange-500"></i>
                <div>
                  <div class="font-semibold">Phone Number</div>
                  <div><a href="tel:${tournament.phoneNumber}" class="text-blue-600 hover:text-blue-800">${tournament.phoneNumber}</a></div>
                </div>
              </div>
              ` : ''}
            </div>
          </div>
          ` : ''}
          
          <!-- Tournament Information -->
          <div class="bg-gray-50 p-4 rounded-xl">
            <h4 class="font-semibold text-gray-800 mb-2">
              <i class="fas fa-info-circle mr-2 text-blue-500"></i>Tournament Information
            </h4>
            <p class="text-gray-600 mb-3">
              This ${tournament.type || 'general'} level tournament is part of Malaysia's 2025 pickleball calendar. 
              ${(tournament.type || 'local') === 'local' ? 'Perfect for community players looking to compete locally.' :
                (tournament.type || 'local') === 'state' ? 'State-level competition for advancing players.' :
                (tournament.type || 'local') === 'national' ? 'National championship level tournament.' :
                'International level tournament with global participation.'}
            </p>
            ${tournament.startDate && tournament.endDate ? `
            <div class="text-sm text-gray-500">
              <i class="fas fa-calendar mr-1"></i>
              Scheduled from ${new Date(tournament.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} 
              to ${new Date(tournament.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
            </div>
            ` : ''}
          </div>
          
          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-3">
            <button class="flex-1 bg-gradient-to-r from-green-500 to-green-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-green-600 hover:to-green-700 transition-all duration-300 transform hover:scale-105">
              <i class="fas fa-user-plus mr-2"></i>Register Now
            </button>
            <button class="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-blue-600 hover:to-blue-700 transition-all duration-300 transform hover:scale-105">
              <i class="fas fa-download mr-2"></i>Download Info
            </button>
            ${tournament.phoneNumber ? `
            <button onclick="window.open('tel:${tournament.phoneNumber}')" class="bg-gradient-to-r from-orange-500 to-orange-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-orange-600 hover:to-orange-700 transition-all duration-300 transform hover:scale-105">
              <i class="fas fa-phone mr-2"></i>Call
            </button>
            ` : ''}
          </div>
        </div>
      `;
      
      modal.classList.remove('hidden');
      modal.classList.add('show');
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
      
      document.body.style.overflow = 'hidden';
    }

    function closeTournamentModal() {
      const modal = document.getElementById('tournament-modal');
      const modalContent = document.getElementById('modal-content');
      
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      
      setTimeout(() => {
        modal.classList.add('hidden');
        modal.classList.remove('show');
        document.body.style.overflow = '';
      }, 300);
    }

    // Close modal when clicking outside
    document.getElementById('tournament-modal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeTournamentModal();
      }
    });

    // Close modal with escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeTournamentModal();
      }
    });

    // Add scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in');
        }
      });
    }, observerOptions);

    // Observe all tournament elements
    document.querySelectorAll('.tournament-card, .tournament-row').forEach(el => {
      observer.observe(el);
    });
    
    // Load tournament notices
    loadTournamentNotices();
  </script>
  
  <!-- Tournament Notices Functions -->
  <script>
    function loadTournamentNotices() {
      fetch('/api/tournament-notices')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            displayNotices(data.notices);
          } else {
            console.error('Failed to load notices:', data.message);
          }
        })
        .catch(error => {
          console.error('Error loading notices:', error);
        });
    }
    
    function displayNotices(notices) {
      const container = document.getElementById('noticesContainer');
      const noNoticesState = document.getElementById('noNoticesState');
      
      if (!notices || notices.length === 0) {
        container.innerHTML = '';
        noNoticesState.classList.remove('hidden');
        return;
      }
      
      noNoticesState.classList.add('hidden');
      
      const noticesHTML = notices.map(notice => {
        const colorClass = getNoticeColorClass(notice.type);
        const iconClass = getNoticeIconClass(notice.type);
        const timeAgo = getTimeAgo(notice.updatedAt);
        
        return `
          <div class="border-l-4 border-${colorClass}-500 bg-${colorClass}-50 p-4 rounded-lg">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="flex items-center mb-2">
                  <i class="fas ${iconClass} text-${colorClass}-500 mr-2"></i>
                  <span class="text-sm font-semibold text-${colorClass}-700">${getNoticeTypeDisplay(notice.type)}</span>
                  <span class="ml-2 text-xs text-${colorClass}-600 bg-${colorClass}-200 px-2 py-1 rounded-full">Updated ${timeAgo}</span>
                </div>
                <h3 class="font-semibold text-gray-800 mb-1">${notice.tournamentName}</h3>
                <p class="text-sm text-gray-600 mb-2">${notice.message}</p>
                ${getNoticeDetailsHTML(notice)}
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = noticesHTML;
    }
    
    function getNoticeColorClass(type) {
      const colorMap = {
        'date_change': 'orange',
        'cancellation': 'red',
        'venue_change': 'blue',
        'registration_deadline': 'green',
        'general': 'gray'
      };
      return colorMap[type] || 'gray';
    }
    
    function getNoticeIconClass(type) {
      const iconMap = {
        'date_change': 'fa-calendar-alt',
        'cancellation': 'fa-times-circle',
        'venue_change': 'fa-map-marker-alt',
        'registration_deadline': 'fa-clock',
        'general': 'fa-bell'
      };
      return iconMap[type] || 'fa-bell';
    }
    
    function getNoticeTypeDisplay(type) {
      const typeMap = {
        'date_change': 'Date Change',
        'cancellation': 'Cancelled',
        'venue_change': 'Venue Change',
        'registration_deadline': 'Registration Deadline',
        'general': 'General Notice'
      };
      return typeMap[type] || type;
    }
    
    function getNoticeDetailsHTML(notice) {
      let detailsHTML = '';
      
      if (notice.details) {
        if (notice.type === 'date_change' && notice.details.originalDate && notice.details.newDate) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-clock mr-1"></i>
              <span>Original: ${notice.details.originalDate}</span>
              <i class="fas fa-arrow-right mx-2"></i>
              <span>New: ${notice.details.newDate}</span>
            </div>
          `;
        } else if (notice.type === 'cancellation' && notice.details.reason) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-exclamation-triangle mr-1"></i>
              <span>Reason: ${notice.details.reason}</span>
            </div>
          `;
        } else if (notice.type === 'venue_change' && notice.details.originalVenue && notice.details.newVenue) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-map-pin mr-1"></i>
              <span>From: ${notice.details.originalVenue}</span>
              <i class="fas fa-arrow-right mx-2"></i>
              <span>To: ${notice.details.newVenue}</span>
            </div>
          `;
        } else if (notice.type === 'registration_deadline' && notice.details.deadline) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-calendar-check mr-1"></i>
              <span>New Deadline: ${notice.details.deadline}</span>
            </div>
          `;
        }
      }
      
      return detailsHTML;
    }
    
    function getTimeAgo(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffMs = now - date;
      const diffMins = Math.floor(diffMs / 60000);
      const diffHours = Math.floor(diffMs / 3600000);
      const diffDays = Math.floor(diffMs / 86400000);
      
      if (diffMins < 1) return 'just now';
      if (diffMins < 60) return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;
      if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
      if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
      return date.toLocaleDateString();
    }
  </script>
  
  <!-- PDF Download Functionality -->
  <script src="/js/tournament-pdf.js"></script>
</body>
</html>
