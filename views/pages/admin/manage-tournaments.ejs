<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Tournaments - Malaysia Pickleball Association</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <style>
    .form-container {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }
    
    .form-container::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
      animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(180deg); }
    }
    
    .form-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      position: relative;
      z-index: 2;
    }
    
    .input-group {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .input-field {
      width: 100%;
      padding: 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
    }
    
    .input-field:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      transform: translateY(-2px);
    }
    
    .input-label {
      position: absolute;
      left: 1rem;
      top: 1rem;
      color: #6b7280;
      font-size: 1rem;
      transition: all 0.3s ease;
      pointer-events: none;
      background: white;
      padding: 0 0.5rem;
    }
    
    .input-field:focus + .input-label,
    .input-field:not(:placeholder-shown) + .input-label {
      top: -0.5rem;
      left: 0.75rem;
      font-size: 0.875rem;
      color: #667eea;
      font-weight: 600;
    }
    
    .month-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 0.75rem;
      margin-top: 1rem;
    }
    
    .month-checkbox {
      position: relative;
      cursor: pointer;
    }
    
    .month-checkbox input {
      position: absolute;
      opacity: 0;
      cursor: pointer;
    }
    
    .month-label {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0.75rem;
      background: #f8fafc;
      border: 2px solid #e5e7eb;
      border-radius: 10px;
      font-weight: 600;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .month-label::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
      transition: left 0.5s;
    }
    
    .month-checkbox:hover .month-label::before {
      left: 100%;
    }
    
    .month-checkbox input:checked + .month-label {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      border-color: #667eea;
      transform: scale(1.05);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
    }
    
    .month-checkbox:hover .month-label {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      padding: 1rem 2rem;
      border-radius: 12px;
      font-weight: 600;
      font-size: 1.1rem;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .btn-primary:hover::before {
      left: 100%;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
    }
    
    .tournament-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
      border: 1px solid #f1f5f9;
      position: relative;
      overflow: hidden;
    }
    
    .tournament-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }
    
    .tournament-card:hover::before {
      transform: scaleX(1);
    }
    
    .tournament-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }
    
    .page-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      border-radius: 20px;
      margin-bottom: 2rem;
      position: relative;
      overflow: hidden;
    }
    
    .page-header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
      animation: rotate 20s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .header-content {
      position: relative;
      z-index: 2;
    }
    
    .date-range-indicator {
      background: rgba(16, 185, 129, 0.1);
      border: 2px solid #10b981;
      border-radius: 10px;
      padding: 0.75rem;
      margin-top: 1rem;
      display: none;
      animation: slideIn 0.3s ease;
    }
    
    @keyframes slideIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
         .success-notification {
       position: fixed;
       top: 100px;
       right: 20px;
       background: rgba(16, 185, 129, 0.95);
       backdrop-filter: blur(10px);
       color: white;
       padding: 1rem 1.5rem;
       border-radius: 12px;
       box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
       z-index: 10000;
       transform: translateX(400px);
       opacity: 0;
       transition: all 0.3s ease;
       border: 1px solid rgba(255, 255, 255, 0.2);
       max-width: 400px;
     }
     
     .success-notification.show {
       transform: translateX(0);
       opacity: 1;
     }
     
     .success-notification::before {
       content: '';
       position: absolute;
       top: 0;
       left: 0;
       right: 0;
       height: 3px;
       background: linear-gradient(90deg, #10b981, #059669);
       border-radius: 12px 12px 0 0;
     }
     
     @media (max-width: 768px) {
       .form-container {
         padding: 1rem;
         border-radius: 15px;
       }
       
       .month-grid {
         grid-template-columns: repeat(2, 1fr);
       }
       
       .page-header {
         padding: 1.5rem;
         text-align: center;
       }
       
       .tournament-card {
         padding: 1rem;
       }
       
       .success-notification {
         right: 10px;
         left: 10px;
         max-width: none;
         transform: translateY(-100px);
       }
       
       .success-notification.show {
         transform: translateY(0);
       }
     }
  </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
  <%- include('../../partials/header') %>
  
  <main class="pt-24 p-4 pb-20">
    <div class="container mx-auto max-w-6xl">
      <!-- Page Header -->
      <div class="page-header">
        <div class="header-content flex flex-col md:flex-row justify-between items-start md:items-center">
          <div>
            <h1 class="text-4xl font-bold mb-2">üèÜ Manage Tournaments</h1>
            <p class="text-lg opacity-90">Create and manage your pickleball tournaments</p>
          </div>
          <a href="/admin/dashboard" class="mt-4 md:mt-0 bg-white bg-opacity-20 text-white px-6 py-3 rounded-xl hover:bg-opacity-30 transition-all duration-300 font-semibold backdrop-filter backdrop-blur-sm">
            ‚Üê Back to Dashboard
          </a>
        </div>
      </div>

      <!-- Add New Tournament Form -->
      <div class="form-container mb-8">
        <div class="form-card p-6">
          <h2 class="text-2xl font-bold mb-6 text-gray-800 flex items-center">
            <span class="bg-gradient-to-r from-purple-500 to-blue-500 text-white p-2 rounded-lg mr-3">+</span>
            Add New Tournament
          </h2>
          
          <% if (errors && errors.length) { %>
            <div class="mb-6 p-4 bg-red-50 border-l-4 border-red-500 rounded-lg">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <% errors.forEach(error => { %>
                    <p class="text-sm text-red-700"><%= error.msg %></p>
                  <% }) %>
                </div>
              </div>
            </div>
          <% } %>
          
          <form action="/admin/tournaments" method="POST" enctype="multipart/form-data" id="tournamentForm">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Tournament Name -->
              <div class="input-group md:col-span-2">
                <input type="text" name="name" value="<%= formData?.name || '' %>" class="input-field" placeholder=" " required>
                <label class="input-label">Tournament Name</label>
              </div>
              
              <!-- Start Date -->
              <div class="input-group">
                <input type="date" name="startDate" value="<%= formData?.startDate || '' %>" class="input-field" placeholder=" " id="startDate">
                <label class="input-label">Start Date</label>
              </div>
              
              <!-- End Date -->
              <div class="input-group">
                <input type="date" name="endDate" value="<%= formData?.endDate || '' %>" class="input-field" placeholder=" " id="endDate">
                <label class="input-label">End Date</label>
              </div>
              
              <!-- Tournament Type -->
              <div class="input-group md:col-span-2">
                <select name="type" class="input-field" required>
                  <option value="">Select Tournament Type</option>
                  <option value="local" <%= formData?.type === 'local' ? 'selected' : '' %>>üèòÔ∏è Local</option>
                  <option value="state" <%= formData?.type === 'state' ? 'selected' : '' %>>üèõÔ∏è State</option>
                  <option value="national" <%= formData?.type === 'national' ? 'selected' : '' %>>üá≤üáæ National</option>
                  <option value="sarawak" <%= formData?.type === 'sarawak' ? 'selected' : '' %>>üèùÔ∏è Miscellaneous Pickleball Events in Sarawak</option>
                  <option value="wmalaysia" <%= formData?.type === 'wmalaysia' ? 'selected' : '' %>>üè¢ Miscellaneous Events in W. Malaysia</option>
                </select>
                <label class="input-label">Tournament Type</label>
              </div>
            </div>
            
            <!-- Date Range Indicator -->
            <div id="dateRangeIndicator" class="date-range-indicator">
              <div class="flex items-center">
                <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span id="dateRangeText" class="text-green-700 font-semibold"></span>
              </div>
            </div>
            
            <!-- Months Selection -->
            <div class="mt-6">
              <label class="block text-lg font-semibold text-gray-700 mb-3">
                üìÖ Tournament Months
                <span class="text-sm font-normal text-gray-500">(Auto-selected based on dates)</span>
              </label>
              <div class="month-grid" id="monthsGrid">
                <% for (let m = 0; m < 12; m++) { %>
                  <div class="month-checkbox">
                    <input type="checkbox" name="months[]" value="<%= m %>" id="month-<%= m %>" <%= formData?.months && formData.months.includes(String(m)) ? 'checked' : '' %>>
                    <label for="month-<%= m %>" class="month-label">
                      <%= new Date(2025, m).toLocaleString('default', { month: 'short' }) %>
                    </label>
                  </div>
                <% } %>
              </div>
            </div>
            
            <!-- Image Upload -->
            <div class="input-group mt-6">
              <input type="file" name="image" accept="image/*" class="input-field" id="imageUpload">
              <label class="input-label">Tournament Image (Optional)</label>
              <div id="imagePreview" class="mt-3 hidden">
                <img id="previewImg" class="w-32 h-32 object-cover rounded-lg border-2 border-gray-200" alt="Preview">
              </div>
            </div>
            
            <div class="flex justify-end mt-8">
              <button type="submit" class="btn-primary">
                <span class="flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  Create Tournament
                </span>
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Current Tournaments -->
      <div class="mt-8">
        <h2 class="text-3xl font-bold mb-6 text-gray-800 flex items-center">
          <span class="bg-gradient-to-r from-green-500 to-blue-500 text-white p-2 rounded-lg mr-3">üìã</span>
          Current Tournaments
        </h2>
        
        <% if (tournaments.length) { %>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% tournaments.forEach((tournament, index) => { %>
              <div class="tournament-card">
                <div class="flex justify-between items-start mb-4">
                  <h3 class="text-xl font-bold text-gray-800 flex-1"><%= tournament.name %></h3>
                  <span class="px-3 py-1 rounded-full text-xs font-semibold
                    <%= tournament.type === 'local' ? 'bg-green-100 text-green-800' : 
                        tournament.type === 'state' ? 'bg-red-100 text-red-800' : 
                        tournament.type === 'national' ? 'bg-blue-100 text-blue-800' : 
                        tournament.type === 'sarawak' ? 'bg-purple-100 text-purple-800' :
                        'bg-orange-100 text-orange-800' %>">
                    <%= tournament.type.toUpperCase() %>
                  </span>
                </div>
                
                <div class="space-y-3 mb-4">
                  <div class="flex items-center text-gray-600">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    <span><%= tournament.startDate ? `${tournament.startDate} to ${tournament.endDate || 'TBD'}` : 'Date TBD' %></span>
                  </div>
                  
                  <div class="flex items-start text-gray-600">
                    <svg class="w-4 h-4 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <div class="flex flex-wrap gap-1">
                      <% tournament.months.forEach(m => { %>
                        <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded-md text-xs">
                          <%= new Date(2025, m).toLocaleString('default', { month: 'short' }) %>
                        </span>
                      <% }) %>
                    </div>
                  </div>
                </div>
                
                <% if (tournament.image) { %>
                  <div class="mb-4">
                    <img src="<%= tournament.image %>" alt="Tournament Image" class="w-full h-32 object-cover rounded-lg">
                  </div>
                <% } %>
                
                <div class="flex justify-end">
                  <form action="/admin/tournaments/delete/<%= index %>" method="POST" onsubmit="return confirmDelete('<%= tournament.name %>')" class="inline">
                    <button type="submit" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center text-sm font-semibold">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Delete
                    </button>
                  </form>
                </div>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="text-center py-12">
            <div class="text-6xl mb-4">üèÜ</div>
            <h3 class="text-xl font-semibold text-gray-600 mb-2">No tournaments yet</h3>
            <p class="text-gray-500">Create your first tournament to get started!</p>
          </div>
        <% } %>
      </div>
    </div>
  </main>

  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>

  <script src="/js/script.js"></script>
  <%- include('../../partials/footer') %>
  
  <script>
    // Auto-select months based on date range
    function updateMonthsFromDates() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const indicator = document.getElementById('dateRangeIndicator');
      const indicatorText = document.getElementById('dateRangeText');
      
      if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        
        if (start <= end) {
          // Clear all checkboxes first
          document.querySelectorAll('input[name="months[]"]').forEach(cb => cb.checked = false);
          
          // Select months in range
          const monthsToSelect = [];
          const current = new Date(start);
          
          while (current <= end) {
            monthsToSelect.push(current.getMonth());
            current.setMonth(current.getMonth() + 1);
          }
          
          monthsToSelect.forEach(month => {
            const checkbox = document.getElementById(`month-${month}`);
            if (checkbox) {
              checkbox.checked = true;
              // Add animation
              checkbox.parentElement.style.animation = 'none';
              setTimeout(() => {
                checkbox.parentElement.style.animation = 'slideIn 0.3s ease';
              }, month * 100);
            }
          });
          
          // Show indicator
          const startMonth = start.toLocaleString('default', { month: 'long', year: 'numeric' });
          const endMonth = end.toLocaleString('default', { month: 'long', year: 'numeric' });
          indicatorText.textContent = `Auto-selected months from ${startMonth} to ${endMonth}`;
          indicator.style.display = 'block';
        } else {
          indicator.style.display = 'none';
        }
      } else {
        indicator.style.display = 'none';
      }
    }
    
    // Image preview
    function setupImagePreview() {
      const imageUpload = document.getElementById('imageUpload');
      const imagePreview = document.getElementById('imagePreview');
      const previewImg = document.getElementById('previewImg');
      
      imageUpload.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
            previewImg.src = e.target.result;
            imagePreview.classList.remove('hidden');
            imagePreview.style.animation = 'slideIn 0.3s ease';
          };
          reader.readAsDataURL(file);
        } else {
          imagePreview.classList.add('hidden');
        }
      });
    }
    
         // Form submission with loading
     function setupFormSubmission() {
       const form = document.getElementById('tournamentForm');
       const loadingOverlay = document.getElementById('loadingOverlay');
       
       form.addEventListener('submit', function() {
         loadingOverlay.style.display = 'flex';
       });
     }
     
     // Show success message
     function showSuccessMessage(message) {
       // Create success notification
       const notification = document.createElement('div');
       notification.className = 'success-notification';
       notification.innerHTML = `
         <div class="flex items-center">
           <svg class="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
           </svg>
           <span class="text-green-800 font-semibold">${message}</span>
         </div>
       `;
       
       // Add to page
       document.body.appendChild(notification);
       
       // Show with animation
       setTimeout(() => {
         notification.classList.add('show');
       }, 100);
       
       // Remove after 4 seconds
       setTimeout(() => {
         notification.classList.remove('show');
         setTimeout(() => {
           if (notification.parentNode) {
             notification.parentNode.removeChild(notification);
           }
         }, 300);
       }, 4000);
     }
    
         // Confirm delete with better styling
     function confirmDelete(tournamentName) {
       const confirmed = confirm(`üóëÔ∏è Are you sure you want to delete the tournament "${tournamentName}"?\n\nThis action cannot be undone.`);
       if (confirmed) {
         // Store scroll position flag for after page reload
         sessionStorage.setItem('scrollToTop', 'true');
         sessionStorage.setItem('deletedTournament', tournamentName);
       }
       return confirmed;
     }
    
         // Initialize all functionality
     document.addEventListener('DOMContentLoaded', function() {
       // Check if we need to scroll to top after delete
       if (sessionStorage.getItem('scrollToTop') === 'true') {
         const deletedTournament = sessionStorage.getItem('deletedTournament');
         
         // Clear the flags
         sessionStorage.removeItem('scrollToTop');
         sessionStorage.removeItem('deletedTournament');
         
         // Smooth scroll to top
         window.scrollTo({
           top: 0,
           behavior: 'smooth'
         });
         
         // Show success message
         if (deletedTournament) {
           showSuccessMessage(`Tournament "${deletedTournament}" has been deleted successfully! üóëÔ∏è`);
         }
       }
       
       // Set up date change listeners
       document.getElementById('startDate').addEventListener('change', updateMonthsFromDates);
       document.getElementById('endDate').addEventListener('change', updateMonthsFromDates);
       
       // Set up image preview
       setupImagePreview();
       
       // Set up form submission
       setupFormSubmission();
       
       // Initial month update if dates are pre-filled
       updateMonthsFromDates();
       
       // Add smooth scroll behavior
       document.documentElement.style.scrollBehavior = 'smooth';
       
       // Add entrance animations
       const cards = document.querySelectorAll('.tournament-card');
       cards.forEach((card, index) => {
         card.style.opacity = '0';
         card.style.transform = 'translateY(20px)';
         setTimeout(() => {
           card.style.transition = 'all 0.5s ease';
           card.style.opacity = '1';
           card.style.transform = 'translateY(0)';
         }, index * 100);
       });
     });
    
    // Add floating label behavior for select elements
    document.querySelectorAll('select.input-field').forEach(select => {
      select.addEventListener('change', function() {
        if (this.value) {
          this.classList.add('has-value');
        } else {
          this.classList.remove('has-value');
        }
      });
      
      // Initial check
      if (select.value) {
        select.classList.add('has-value');
      }
    });
  </script>
</body>
</html>
