<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Players - Malaysia Pickleball Association</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    .registration-card {
      transition: all 0.3s ease;
      border-left: 4px solid #e5e7eb;
    }
    .registration-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .registration-card.pending {
      border-left-color: #f59e0b;
      background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    }
    .registration-card.approved {
      border-left-color: #10b981;
      background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
    }
    .profile-thumb {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      object-fit: cover;
    }
    .tab-button {
      transition: all 0.3s ease;
    }
    .tab-button.active {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
  </style>
</head>
<body class="bg-gray-100">
  <%- include('../../partials/header') %>
  
  <main class="pt-24 p-6 min-h-screen">
    <div class="container mx-auto max-w-7xl">
      
      <!-- Header -->
      <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
        <div class="mb-4 md:mb-0">
          <h1 class="text-3xl font-bold text-gray-800 mb-2">
            <i class="fas fa-users text-blue-600 mr-3"></i>
            Player Management
          </h1>
          <p class="text-gray-600">Manage player registrations and approved accounts</p>
        </div>
        <div class="flex items-center space-x-4">
          <a href="/admin/dashboard" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
            <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
          </a>
          <button id="refreshBtn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            <i class="fas fa-sync-alt mr-2"></i>Refresh
          </button>
          <button id="downloadPdfBtn" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
            <i class="fas fa-file-pdf mr-2"></i>Download PDF
          </button>
        </div>
      </div>

      <!-- Stats Overview -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-yellow-500">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Pending Registrations</p>
              <p class="text-3xl font-bold text-yellow-600"><%= playerRegistrations.length %></p>
            </div>
            <div class="bg-yellow-100 p-3 rounded-full">
              <i class="fas fa-clock text-yellow-600 text-xl"></i>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Approved Players</p>
              <p class="text-3xl font-bold text-green-600"><%= approvedPlayers.length %></p>
            </div>
            <div class="bg-green-100 p-3 rounded-full">
              <i class="fas fa-check-circle text-green-600 text-xl"></i>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Players</p>
              <p class="text-3xl font-bold text-blue-600"><%= playerRegistrations.length + approvedPlayers.length %></p>
            </div>
            <div class="bg-blue-100 p-3 rounded-full">
              <i class="fas fa-users text-blue-600 text-xl"></i>
            </div>
          </div>
        </div>
      </div>

      <!-- Tab Navigation -->
      <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <div class="flex flex-wrap gap-2 mb-6">
          <button id="pendingTabBtn" class="tab-button active px-6 py-3 rounded-lg font-semibold" data-tab="pending">
            <i class="fas fa-clock mr-2"></i>Pending Registrations (<%= pendingRegistrations.length %>)
          </button>
          <button id="approvedTabBtn" class="tab-button px-6 py-3 rounded-lg font-semibold bg-gray-100 text-gray-700" data-tab="approved">
            <i class="fas fa-check-circle mr-2"></i>Approved Players (<%= approvedPlayers.length %>)
          </button>
        </div>

        <!-- Pending Registrations Tab -->
        <div id="pending-tab" class="tab-content">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
            <h3 class="text-xl font-bold text-gray-800 mb-4 md:mb-0">
              <i class="fas fa-clock text-yellow-500 mr-3"></i>
              Pending Player Registrations
            </h3>
            <div class="flex items-center space-x-3">
              <div class="bg-blue-50 border border-blue-200 rounded-lg px-4 py-2 text-sm text-blue-700">
                <i class="fas fa-info-circle mr-2"></i>
                Use the buttons above to download or print the registration report
              </div>
            </div>
          </div>
          
          <% if (pendingRegistrations.length === 0) { %>
            <div class="text-center py-12">
              <div class="bg-gray-100 w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-6">
                <i class="fas fa-inbox text-4xl text-gray-400"></i>
              </div>
              <h4 class="text-xl font-semibold text-gray-700 mb-2">No Pending Registrations</h4>
              <p class="text-gray-600">All player registrations have been processed.</p>
            </div>
          <% } else { %>
            <div class="space-y-6">
              <% pendingRegistrations.forEach(registration => { %>
                <div class="registration-card pending bg-white rounded-xl shadow-md p-6" data-registration-id="<%= registration.id %>">
                  <div class="flex flex-col lg:flex-row lg:items-center justify-between">
                    <!-- Player Info -->
                    <div class="flex items-start space-x-4 mb-4 lg:mb-0">
                      <img src="<%= registration.profilePicture || '/images/default-avatar.png' %>" 
                           alt="<%= registration.fullName %>" class="profile-thumb">
                      <div class="flex-1">
                        <h4 class="text-lg font-bold text-gray-800 mb-1"><%= registration.fullName %></h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-600">
                          <div><i class="fas fa-id-card mr-2"></i><%= registration.icNumber %></div>
                          <div><i class="fas fa-birthday-cake mr-2"></i><%= registration.age %> years old</div>
                          <div><i class="fas fa-envelope mr-2"></i><%= registration.email %></div>
                          <div><i class="fas fa-phone mr-2"></i><%= registration.phoneNumber %></div>
                          <div><i class="fas fa-user-circle mr-2"></i><%= registration.username %></div>
                          <div><i class="fas fa-calendar mr-2"></i><%= new Date(registration.submittedAt).toLocaleDateString('en-GB') %></div>
                        </div>
                        <div class="mt-2">
                          <div class="text-sm text-gray-600">
                            <i class="fas fa-map-marker-alt mr-2"></i><%= registration.address %>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex flex-col sm:flex-row gap-3">
                      <button data-action="approve" 
                              data-player-id="<%= registration.id %>" 
                              data-player-name="<%= registration.fullName %>"
                              class="action-btn approve-btn bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors font-medium">
                        <i class="fas fa-check mr-2"></i>Approve
                      </button>
                      <button data-action="reject" 
                              data-player-id="<%= registration.id %>" 
                              data-player-name="<%= registration.fullName %>"
                              class="action-btn reject-btn bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors font-medium">
                        <i class="fas fa-times mr-2"></i>Reject
                      </button>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
        </div>

        <!-- Approved Players Tab -->
        <div id="approved-tab" class="tab-content hidden">
          <h3 class="text-xl font-bold text-gray-800 mb-6">
            <i class="fas fa-check-circle text-green-500 mr-3"></i>
            Approved Players
          </h3>
          
          <% if (approvedPlayers.length === 0) { %>
            <div class="text-center py-12">
              <div class="bg-gray-100 w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-6">
                <i class="fas fa-users text-4xl text-gray-400"></i>
              </div>
              <h4 class="text-xl font-semibold text-gray-700 mb-2">No Approved Players</h4>
              <p class="text-gray-600">No players have been approved yet.</p>
            </div>
          <% } else { %>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <% approvedPlayers.forEach(player => { %>
                <div class="registration-card approved bg-white rounded-xl shadow-md p-6">
                  <div class="flex items-center space-x-4">
                    <img src="<%= player.profilePicture || '/images/default-avatar.png' %>" 
                         alt="<%= player.fullName %>" class="profile-thumb">
                    <div class="flex-1">
                      <h4 class="text-lg font-bold text-gray-800 mb-1"><%= player.fullName %></h4>
                      <div class="text-sm text-gray-600 space-y-1">
                        <div><i class="fas fa-id-badge mr-2"></i>Player ID: <span class="font-medium text-blue-600"><%= player.playerId %></span></div>
                        <div><i class="fas fa-envelope mr-2"></i><%= player.email %></div>
                        <div><i class="fas fa-phone mr-2"></i><%= player.phoneNumber %></div>
                        <div><i class="fas fa-calendar-check mr-2"></i>Joined: <%= new Date(player.joinDate).toLocaleDateString('en-GB') %></div>
                      </div>
                      <div class="mt-3">
                        <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-medium">
                          <i class="fas fa-check-circle mr-1"></i>Active Player
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
        </div>
      </div>

    </div>
  </main>

  <%- include('../../partials/footer') %>
  <script src="/js/script.js"></script>
  <script>
    console.log('Admin players script starting...');

    // Simple tab switching
    function showTab(tabName) {
      console.log('Switching to tab:', tabName);
      
      // Hide all tabs
      document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.add('hidden');
      });
      
      // Remove active class from all buttons
      document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
        btn.classList.add('bg-gray-100', 'text-gray-700');
      });
      
      // Show selected tab
      document.getElementById(tabName + '-tab').classList.remove('hidden');
      
      // Add active class to correct button
      const buttons = document.querySelectorAll('.tab-button');
      if (tabName === 'pending') {
        buttons[0].classList.add('active');
        buttons[0].classList.remove('bg-gray-100', 'text-gray-700');
      } else {
        buttons[1].classList.add('active');
        buttons[1].classList.remove('bg-gray-100', 'text-gray-700');
      }
    }



    // Refresh page
    function refreshData() {
      console.log('Refreshing...');
      window.location.reload();
    }

    // Approve player
    async function approvePlayer(id, name) {
      console.log('=== APPROVE PLAYER ===');
      console.log('Player ID:', id);
      console.log('Player Name:', name);
      console.log('AJAX Handler available:', !!window.ajaxHandler);
      
      if (!confirm(`Approve ${name}?`)) {
        console.log('User cancelled approval');
        return;
      }
      
      try {
        console.log('Making request to:', `/admin/players/approve/${id}`);
        
        const response = await fetch(`/admin/players/approve/${id}`, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        console.log('Response status:', response.status);
        console.log('Response ok:', response.ok);
        
        const result = await response.json();
        console.log('Response data:', result);
        
        if (result.success) {
          alert(result.message || 'Player approved successfully!');
          
          // Remove the card from the pending list
          const card = document.querySelector(`[data-registration-id="${id}"]`);
          if (card) {
            card.style.transition = 'all 0.3s ease';
            card.style.transform = 'translateX(-100%)';
            card.style.opacity = '0';
            setTimeout(() => {
              card.remove();
              // Update counters if needed
              const pendingCount = document.querySelectorAll('[data-registration-id]').length;
              console.log('Remaining pending registrations:', pendingCount);
            }, 300);
          }
        } else {
          alert('Error: ' + (result.message || 'Unknown error'));
        }
      } catch (error) {
        console.error('Approval error:', error);
        alert('Failed to approve player: ' + error.message);
      }
    }

    // Reject player
    async function rejectPlayer(id, name) {
      console.log('=== REJECT PLAYER ===');
      console.log('Player ID:', id);
      console.log('Player Name:', name);
      console.log('AJAX Handler available:', !!window.ajaxHandler);
      
      if (!confirm(`Reject ${name}? This action cannot be undone.`)) {
        console.log('User cancelled rejection');
        return;
      }

      try {
        console.log('Making request to:', `/admin/players/reject/${id}`);
        
        const response = await fetch(`/admin/players/reject/${id}`, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        console.log('Response status:', response.status);
        console.log('Response ok:', response.ok);
        
        const result = await response.json();
        console.log('Response data:', result);
        
        if (result.success) {
          alert(result.message || 'Player rejected successfully!');
          
          // Remove the card from the pending list
          const card = document.querySelector(`[data-registration-id="${id}"]`);
          if (card) {
            card.style.transition = 'all 0.3s ease';
            card.style.transform = 'translateX(-100%)';
            card.style.opacity = '0';
            setTimeout(() => {
              card.remove();
              // Update counters if needed
              const pendingCount = document.querySelectorAll('[data-registration-id]').length;
              console.log('Remaining pending registrations:', pendingCount);
            }, 300);
          }
        } else {
          alert('Error: ' + (result.message || 'Unknown error'));
        }
      } catch (error) {
        console.error('Rejection error:', error);
        alert('Failed to reject player: ' + error.message);
      }
    }



    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      console.log('=== PAGE LOADED ===');
      console.log('Pending registrations:', <%= playerRegistrations.length %>);
      console.log('Approved players:', <%= approvedPlayers.length %>);
      console.log('Action buttons found:', document.querySelectorAll('.action-btn').length);
      
      // Setup event listeners for all buttons
      setupAllButtonListeners();
      
      console.log('=== INITIALIZATION COMPLETE ===');
    });

    // Setup event listeners for all buttons
    function setupAllButtonListeners() {
      console.log('Setting up all button listeners...');
      
      // Tab buttons
      document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const tabName = this.getAttribute('data-tab');
          console.log('Tab button clicked:', tabName);
          showTab(tabName);
        });
      });
      
      // Refresh button
      const refreshBtn = document.getElementById('refreshBtn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('Refresh button clicked');
          refreshData();
        });
      }
      
      // Download PDF button
      const downloadPdfBtn = document.getElementById('downloadPdfBtn');
      if (downloadPdfBtn) {
        downloadPdfBtn.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('Download PDF button clicked');
          downloadPDF();
        });
      }
      
      // Add event listeners for approve buttons
      document.querySelectorAll('.approve-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const playerId = this.getAttribute('data-player-id');
          const playerName = this.getAttribute('data-player-name');
          console.log('Approve button clicked:', playerId, playerName);
          approvePlayer(playerId, playerName);
        });
      });
      
      // Add event listeners for reject buttons
      document.querySelectorAll('.reject-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const playerId = this.getAttribute('data-player-id');
          const playerName = this.getAttribute('data-player-name');
          console.log('Reject button clicked:', playerId, playerName);
          rejectPlayer(playerId, playerName);
        });
      });
      
      console.log('Event listeners setup complete');
      console.log('Tab buttons:', document.querySelectorAll('.tab-button').length);
      console.log('Approve buttons:', document.querySelectorAll('.approve-btn').length);
      console.log('Reject buttons:', document.querySelectorAll('.reject-btn').length);
    }

    // Download PDF report
    async function downloadPDF() {
      try {
        console.log('Downloading PDF report...');
        
        // Show loading state
        const downloadBtn = document.getElementById('downloadPdfBtn');
        const originalText = downloadBtn.innerHTML;
        downloadBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Generating PDF...';
        downloadBtn.disabled = true;
        
        // Try to fetch the PDF
        const response = await fetch('/admin/players/pdf');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        // Check if response is actually a PDF
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/pdf')) {
          // If not PDF, show fallback option
          const result = await response.json();
          throw new Error(result.message || 'PDF generation failed');
        }
        
        // Create blob and download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `Pending_Registrations_${new Date().toISOString().split('T')[0]}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        
        // Reset button after a short delay
        setTimeout(() => {
          downloadBtn.innerHTML = originalText;
          downloadBtn.disabled = false;
        }, 2000);
        
      } catch (error) {
        console.error('Error downloading PDF:', error);
        
        // Reset button
                  const downloadBtn = document.getElementById('downloadPdfBtn');
        downloadBtn.innerHTML = originalText;
        downloadBtn.disabled = false;
        
        // Show fallback option
        const useHtmlReport = confirm(
          'PDF generation failed. Would you like to open a printable HTML report instead?\n\n' +
          'Click OK to open HTML report, or Cancel to try PDF again later.'
        );
        
        if (useHtmlReport) {
          window.open('/admin/players/report', '_blank');
        }
      }
    }



    // Make functions globally accessible for onclick handlers
    window.showTab = showTab;
    window.refreshData = refreshData;
    window.approvePlayer = approvePlayer;
    window.rejectPlayer = rejectPlayer;
    window.viewPlayerDetails = viewPlayerDetails;
    window.downloadPDF = downloadPDF;

    console.log('Script loaded successfully');
  </script>
</body>
</html> 