<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>View All Tournaments - Malaysia Pickleball Association</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <!-- Font Awesome for icons -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    .page-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      border-radius: 20px;
      margin-bottom: 2rem;
      position: relative;
      overflow: hidden;
    }
    
    .page-header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
    }
    
    .header-content {
      position: relative;
      z-index: 2;
    }
    
    .tournament-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      border: 1px solid #f1f5f9;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
    }
    
    .tournament-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
    }
    
    .filter-btn {
      transition: all 0.3s ease;
    }
    
    .filter-btn.active {
      background: linear-gradient(135deg, #667eea, #764ba2) !important;
      color: white !important;
      transform: scale(1.05);
    }
    
    .search-container {
      position: relative;
    }
    
           .search-input {
         padding-left: 2.5rem;
         border: 2px solid #e5e7eb;
         border-radius: 8px;
         transition: all 0.3s ease;
         font-size: 0.875rem;
       }
    
    .search-input:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
           .search-icon {
         position: absolute;
         left: 0.75rem;
         top: 50%;
         transform: translateY(-50%);
         color: #9ca3af;
         font-size: 0.875rem;
       }
    
    /* Modal styles */
    .input-group {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .input-field {
      width: 100%;
      padding: 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
    }
    
    .input-field:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      transform: translateY(-2px);
    }
    
    .input-label {
      position: absolute;
      left: 1rem;
      top: 1rem;
      color: #9ca3af;
      transition: all 0.3s ease;
      pointer-events: none;
      font-size: 1rem;
      background: white;
      padding: 0 0.5rem;
      border-radius: 4px;
    }
    
    .input-field:focus + .input-label,
    .input-field:not(:placeholder-shown) + .input-label,
    .input-field.has-value + .input-label {
      top: -0.5rem;
      left: 0.75rem;
      font-size: 0.875rem;
      color: #667eea;
      transform: scale(0.9);
    }
    
    .edit-btn:hover, .delete-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    /* Success notification styles */
    .success-notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      font-weight: 600;
      font-size: 0.875rem;
      box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
      z-index: 10000;
      transform: translateX(400px);
      opacity: 0;
      transition: all 0.3s ease;
      border: 1px solid rgba(255, 255, 255, 0.2);
      max-width: 400px;
    }
    
    .success-notification.show {
      transform: translateX(0);
      opacity: 1;
    }

    /* Ensure Add Notice modal never overflows viewport (Tailwind CDN can't parse max-h-[90vh]) */
    #noticeModal { 
      align-items: center; 
      justify-content: center; 
    }
    #noticeModalContent {
      max-height: 90vh; /* clamp */
      display: flex;
      flex-direction: column;
      width: 100%;
      max-width: 64rem; /* ~max-w-4xl */
    }

    /* Mobile optimizations */
    @media (max-width: 768px) {
      .page-header {
        padding: 1rem;
        text-align: center;
        border-radius: 14px;
        margin: 0.5rem;
        margin-bottom: 1rem;
      }
      
      .page-header h1 {
        font-size: 1.75rem !important;
        margin-bottom: 0.25rem !important;
        line-height: 1.1;
      }
      
      .page-header p {
        font-size: 0.875rem !important;
        opacity: 0.8 !important;
      }
      
      .tournament-card {
        padding: 0.75rem;
      }
      
      .tournament-card h3 {
        font-size: 1.125rem !important;
        margin-bottom: 0.75rem !important;
      }
      
      .tournament-card .space-y-3 {
        gap: 0.5rem !important;
      }
      
      .tournament-card .space-y-3 > div {
        margin: 0 !important;
        margin-bottom: 0.5rem !important;
      }
      
      .tournament-card span.text-sm {
        font-size: 0.8rem !important;
      }
      
      .filter-btn {
        padding: 0.5rem 0.75rem !important;
        font-size: 0.8rem !important;
        border-radius: 8px !important;
      }
      
      main.p-4 {
        padding: 0.5rem !important;
      }
      
      .container {
        max-width: 100% !important;
        padding: 0 !important;
      }
      
             .search-input {
         font-size: 0.875rem;
         padding: 0.5rem 0.5rem 0.5rem 2rem !important;
         width: 100% !important;
       }
       
       .search-icon {
         left: 0.5rem !important;
       }
      
      .back-btn {
        width: 100% !important;
        justify-content: center !important;
        margin-bottom: 0.75rem !important;
        padding: 0.75rem 1rem !important;
        font-size: 0.875rem !important;
        border-radius: 10px !important;
      }
      
      .bg-white.rounded-2xl.shadow-xl.p-6 {
        padding: 0.75rem !important;
        margin: 0.5rem !important;
        border-radius: 12px !important;
      }
      
             .flex.flex-col.md\\:flex-row.gap-4 {
         gap: 0.75rem !important;
       }
       
       .flex.flex-wrap.gap-2 {
         gap: 0.5rem !important;
       }
       
       /* Notice cards mobile styling */
       .border-l-4 {
         border-left-width: 3px !important;
       }
       
       .space-y-4 > div {
         margin-bottom: 0.75rem !important;
       }
       
       .space-y-4 > div:last-child {
         margin-bottom: 0 !important;
       }
      
      .grid.gap-6 {
        gap: 0.75rem !important;
        margin: 0.5rem !important;
      }
      
      .tournament-card .px-3.py-1 {
        padding: 0.375rem 0.625rem !important;
        font-size: 0.7rem !important;
      }
      
      .tournament-card .flex.justify-end {
        gap: 0.5rem !important;
      }
      
      .tournament-card .edit-btn,
      .tournament-card .delete-btn {
        padding: 0.625rem 1rem !important;
        font-size: 0.8rem !important;
        border-radius: 8px !important;
        flex: 1 !important;
        justify-content: center !important;
      }
      
      .tournament-card .edit-btn svg,
      .tournament-card .delete-btn svg {
        width: 0.875rem !important;
        height: 0.875rem !important;
      }
      
      .success-notification {
        right: 0.5rem !important;
        left: 0.5rem !important;
        max-width: none !important;
        transform: translateY(-100px) !important;
      }
      
      .success-notification.show {
        transform: translateY(0) !important;
      }
      
      /* Modal mobile styling */
      #editModal {
        align-items: center !important;
        justify-content: center !important;
      }
      
      #editModalContent {
        margin: 0.5rem !important;
        max-height: 95vh !important;
        width: calc(100% - 1rem) !important;
        max-width: none !important;
      }
      
      .input-field {
        padding: 0.75rem !important;
        font-size: 0.875rem !important;
        border-radius: 8px !important;
      }
      
      .input-label {
        font-size: 0.75rem !important;
        padding: 0 0.375rem !important;
      }
      
      .input-group {
        margin-bottom: 1rem !important;
      }
    }
  </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
  
  <main class="p-4 pb-20">
    <div class="container mx-auto max-w-6xl">
      <!-- Page Header -->
      <div class="page-header">
        <div class="header-content">
          <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
            <div>
              <h1 class="text-4xl font-bold mb-2">üèÜ All Tournaments</h1>
              <p class="text-lg opacity-90">View and manage all tournaments (<%= tournaments.length %> total)</p>
            </div>
            <a href="/admin/tournaments" class="back-btn mt-4 md:mt-0 bg-white bg-opacity-20 text-white px-6 py-3 rounded-xl hover:bg-opacity-30 transition-all duration-300 font-semibold backdrop-filter backdrop-blur-sm">
              ‚Üê Back to Manage
            </a>
          </div>
        </div>
      </div>

             <!-- Tournament Notices Section -->
       <div class="bg-white rounded-2xl shadow-xl p-6 mb-8">
         <div class="flex items-center justify-between mb-6">
           <div>
             <h2 class="text-2xl font-bold text-gray-800 flex items-center">
               <i class="fas fa-bell text-orange-500 mr-3"></i>
               Tournament Notices
             </h2>
             <div id="noticeStats" class="flex gap-4 mt-2 text-sm hidden">
               <span class="text-gray-600">
                 <i class="fas fa-robot text-blue-500 mr-1"></i>
                 <span id="autoNoticeCount">0</span> auto-generated
               </span>
               <span class="text-gray-600">
                 <i class="fas fa-history text-gray-500 mr-1"></i>
                 <span id="manualNoticeCount">0</span> legacy
               </span>
             </div>
           </div>
         </div>
         
         <!-- Notice Cards -->
         <div id="noticesContainer" class="space-y-4">
           <!-- Notices will be loaded here dynamically -->
         </div>
         
         <!-- No Notices State -->
         <div class="text-center py-8 hidden" id="noNoticesState">
           <div class="text-4xl mb-4">üì¢</div>
           <h3 class="text-lg font-semibold text-gray-600 mb-2">No notices yet</h3>
           <p class="text-gray-500">All tournaments are running as scheduled. Notices will automatically appear when tournament information changes.</p>
         </div>
       </div>

             <!-- Tournaments Grid -->
       <div class="bg-white rounded-2xl shadow-xl p-6 mb-8">
         <div class="flex items-center justify-between mb-6">
           <h2 class="text-2xl font-bold text-gray-800 flex items-center">
             <i class="fas fa-trophy text-yellow-500 mr-3"></i>
             All Tournaments
           </h2>
           <div class="flex items-center space-x-4">
             <!-- Search -->
             <div class="search-container">
               <input type="text" id="searchInput" class="search-input w-64 py-2 pl-10 pr-4" placeholder="Search tournaments...">
               <i class="fas fa-search search-icon"></i>
             </div>
             
             <!-- Filter by Type -->
             <div class="flex space-x-2">
               <button class="filter-btn px-3 py-2 rounded-lg bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-300" data-filter="all">
                 <i class="fas fa-globe mr-1 text-gray-500"></i>All
               </button>
               <button class="filter-btn px-3 py-2 rounded-lg bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-green-200 hover:border-green-400 hover:shadow-lg transition-all duration-300" data-filter="local">
                 <i class="fas fa-home mr-1 text-green-500"></i>Local
               </button>
               <button class="filter-btn px-3 py-2 rounded-lg bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-red-200 hover:border-red-400 hover:shadow-lg transition-all duration-300" data-filter="state">
                 <i class="fas fa-flag mr-1 text-red-500"></i>State
               </button>
               <button class="filter-btn px-3 py-2 rounded-lg bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-blue-200 hover:border-blue-400 hover:shadow-lg transition-all duration-300" data-filter="national">
                 <i class="fas fa-star mr-1 text-blue-500"></i>National
               </button>
               <button class="filter-btn px-3 py-2 rounded-lg bg-white text-gray-700 shadow-md font-medium text-sm border-2 border-orange-200 hover:border-orange-400 hover:shadow-lg transition-all duration-300" data-filter="international">
                 <i class="fas fa-globe mr-1 text-orange-500"></i>International
               </button>
             </div>
           </div>
         </div>
         
         <!-- Results Counter -->
         <div class="text-sm text-gray-600 mb-4">
           Showing <span id="resultCount"><%= tournaments.length %></span> tournaments
         </div>
         
         <div id="tournamentsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <% if (tournaments.length) { %>
          <% tournaments.forEach((tournament, index) => { %>
            <div class="tournament-card" data-tournament-type="<%= tournament.type || 'general' %>" data-search-content="<%= (tournament.name + ' ' + (tournament.venue || '') + ' ' + (tournament.organizer || '')).toLowerCase() %>">
              <div class="flex justify-between items-start mb-4">
                <h3 class="text-xl font-bold text-gray-800 flex-1"><%= tournament.name %></h3>
                <span class="px-3 py-1 rounded-full text-xs font-semibold
                  <%= tournament.type === 'local' ? 'bg-green-100 text-green-800' : 
                      tournament.type === 'state' ? 'bg-red-100 text-red-800' : 
                      tournament.type === 'national' ? 'bg-blue-100 text-blue-800' : 
                      tournament.type === 'international' ? 'bg-orange-100 text-orange-800' :
                      'bg-gray-100 text-gray-800' %>">
                  <%= tournament.type ? tournament.type.toUpperCase() : 'GENERAL' %>
                </span>
              </div>
              
              <div class="space-y-3 mb-4">
                <div class="flex items-center text-gray-600">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <span class="text-sm">
                    <% if (tournament.startDate && tournament.endDate) { %>
                      <%= new Date(tournament.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %> - 
                      <%= new Date(tournament.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %>
                    <% } else { %>
                      Dates TBA
                    <% } %>
                  </span>
                </div>
                
                <div class="flex items-center text-gray-600">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  <span class="text-sm"><%= tournament.venue || 'TBA' %>, <%= tournament.city || 'TBA' %></span>
                </div>
                
                <div class="flex items-center text-gray-600">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  <span class="text-sm">Organized by: <%= tournament.organizer || 'TBA' %></span>
                </div>
                
                <div class="flex items-center text-gray-600">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  <span class="text-sm">Contact: <%= tournament.personInCharge || 'TBA' %></span>
                </div>
                
                <div class="flex items-center text-gray-600">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  <span class="text-sm"><%= tournament.phoneNumber || 'TBA' %></span>
                </div>
              </div>
              
              <% if (tournament.image) { %>
                <div class="mb-4">
                  <img src="<%= tournament.image %>" alt="Tournament Image" class="w-full h-32 object-cover rounded-lg">
                </div>
              <% } %>
              
              <div class="flex justify-end space-x-2">
                <button type="button" class="edit-btn bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center text-sm font-semibold" 
                        data-tournament-id="<%= tournament._id %>"
                        data-tournament-name="<%= tournament.name %>"
                        data-tournament-start="<%= tournament.startDate || '' %>"
                        data-tournament-end="<%= tournament.endDate || '' %>"
                        data-tournament-type="<%= tournament.type || '' %>"
                        data-tournament-venue="<%= tournament.venue || '' %>"
                        data-tournament-city="<%= tournament.city || '' %>"
                        data-tournament-organizer="<%= tournament.organizer || '' %>"
                        data-tournament-person="<%= tournament.personInCharge || '' %>"
                        data-tournament-phone="<%= tournament.phoneNumber || '' %>"
                        data-tournament-version="<%= tournament.version || 0 %>">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  <span>Edit</span>
                </button>
                <button type="button" class="delete-btn bg-red-500 text-white px-4 py-2 rounded-lg flex items-center text-sm font-semibold" 
                        data-tournament-id="<%= tournament._id %>"
                        data-tournament-name="<%= tournament.name %>">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  <span>Delete</span>
                </button>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="col-span-full text-center py-12">
            <div class="text-6xl mb-4">üèÜ</div>
            <h3 class="text-xl font-semibold text-gray-600 mb-2">No tournaments yet</h3>
            <p class="text-gray-500">Start creating tournaments to see them here!</p>
            <a href="/admin/tournaments" class="mt-4 inline-block bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300">
              Create First Tournament
            </a>
                     </div>
         <% } %>
         </div>
       </div>
     </div>
   </main>

  <!-- Edit Tournament Modal -->
  <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4" style="display: none;">
    <div class="bg-white rounded-2xl w-full max-w-4xl max-h-[90vh] flex flex-col transform scale-95 opacity-0 transition-all duration-300" id="editModalContent">
      <div class="p-6 border-b border-gray-200 flex-shrink-0">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-bold text-gray-800">
            <i class="fas fa-edit mr-3 text-blue-500"></i>Edit Tournament
          </h2>
          <button class="close-modal-btn text-gray-500 hover:text-gray-700 text-2xl">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      
      <div class="p-6 flex-1 overflow-y-auto">
        <form id="editTournamentForm" method="POST" enctype="multipart/form-data">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Tournament Name -->
            <div class="input-group md:col-span-2">
              <input type="text" name="name" id="editName" class="input-field" placeholder=" " required>
              <label class="input-label">Tournament Name</label>
            </div>
            
            <!-- Start Date -->
            <div class="input-group">
              <input type="date" name="startDate" id="editStartDate" class="input-field" placeholder=" ">
              <label class="input-label">Start Date</label>
            </div>
            
            <!-- End Date -->
            <div class="input-group">
              <input type="date" name="endDate" id="editEndDate" class="input-field" placeholder=" ">
              <label class="input-label">End Date</label>
            </div>
            
            <!-- Tournament Type -->
            <div class="input-group">
              <select name="type" id="editType" class="input-field" required>
                <option value="">Select Type</option>
                <option value="local">Local</option>
                <option value="state">State</option>
                <option value="national">National</option>
                <option value="international">International</option>
              </select>
              <label class="input-label">Tournament Type</label>
            </div>
            
            <!-- Venue -->
            <div class="input-group">
              <input type="text" name="venue" id="editVenue" class="input-field" placeholder=" ">
              <label class="input-label">Venue</label>
            </div>
            
            <!-- City and State -->
            <div class="input-group">
              <input type="text" name="city" id="editCity" class="input-field" placeholder=" ">
              <label class="input-label">City and State</label>
            </div>
            
            <!-- Organizer -->
            <div class="input-group">
              <input type="text" name="organizer" id="editOrganizer" class="input-field" placeholder=" ">
              <label class="input-label">Organizer</label>
            </div>
            
            <!-- Person in Charge -->
            <div class="input-group">
              <input type="text" name="personInCharge" id="editPersonInCharge" class="input-field" placeholder=" ">
              <label class="input-label">Person in Charge</label>
            </div>
            
            <!-- Phone Number -->
            <div class="input-group">
              <input type="text" name="phoneNumber" id="editPhoneNumber" class="input-field" placeholder=" ">
              <label class="input-label">Phone Number</label>
            </div>
          </div>
          
          <div class="flex justify-end space-x-4 mt-8">
            <button type="button" class="cancel-btn px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
              Cancel
            </button>
            <button type="submit" class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
              <i class="fas fa-save mr-2"></i>Update Tournament
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>


  <%- include('../../partials/footer') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('searchInput');
      const filterBtns = document.querySelectorAll('.filter-btn');
      const tournamentCards = document.querySelectorAll('.tournament-card');
      const resultCount = document.getElementById('resultCount');
      
      let currentFilter = 'all';
      let currentSearch = '';
      
      // Search functionality
      searchInput.addEventListener('input', function() {
        currentSearch = this.value.toLowerCase();
        filterTournaments();
      });
      
      // Filter functionality
      filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          filterBtns.forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');
          
          currentFilter = this.dataset.filter;
          filterTournaments();
        });
      });
      
      function filterTournaments() {
        let visibleCount = 0;
        
        tournamentCards.forEach(card => {
          const type = card.dataset.tournamentType;
          const searchContent = card.dataset.searchContent;
          
          const matchesFilter = currentFilter === 'all' || type === currentFilter;
          const matchesSearch = searchContent.includes(currentSearch);
          
          if (matchesFilter && matchesSearch) {
            card.style.display = 'block';
            visibleCount++;
          } else {
            card.style.display = 'none';
          }
        });
        
        resultCount.textContent = visibleCount;
      }
      
      // Set initial active filter
      document.querySelector('[data-filter="all"]').classList.add('active');
      
      // Setup edit and delete functionality
      setupEditDeleteFunctionality();
      
      // Load tournament notices
      loadTournamentNotices();
      
      
      // Auto-refresh notices every 30 seconds to catch new automatic notices
      setInterval(() => {
        loadTournamentNotices(true); // Show alert for new notices
      }, 30000);
      
      // Setup delete notice functionality
      document.addEventListener('click', function(e) {
        if (e.target.closest('.delete-notice-btn')) {
          const noticeId = e.target.closest('.delete-notice-btn').dataset.noticeId;
          deleteNotice(noticeId);
        }
      });
    });
    
    // Tournament Notices Functions
    let lastNoticeCount = 0;
    
    function loadTournamentNotices(showNewNoticeAlert = false) {
      fetch('/admin/tournament-notices')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Check for new notices
            if (showNewNoticeAlert && data.notices.length > lastNoticeCount) {
              const newNoticesCount = data.notices.length - lastNoticeCount;
              showSuccessMessage(`üîî ${newNoticesCount} new tournament notice${newNoticesCount > 1 ? 's' : ''} added automatically!`);
            }
            
            lastNoticeCount = data.notices.length;
            displayNotices(data.notices);
          } else {
            console.error('Failed to load notices:', data.message);
          }
        })
        .catch(error => {
          console.error('Error loading notices:', error);
        });
    }
    
    function displayNotices(notices) {
      const container = document.getElementById('noticesContainer');
      const noNoticesState = document.getElementById('noNoticesState');
      const noticeStats = document.getElementById('noticeStats');
      
      if (!notices || notices.length === 0) {
        container.innerHTML = '';
        noNoticesState.classList.remove('hidden');
        noticeStats.classList.add('hidden');
        return;
      }
      
      noNoticesState.classList.add('hidden');
      
      // Update statistics
      const autoCount = notices.filter(notice => notice.createdBy === 'system').length;
      const manualCount = notices.length - autoCount;
      document.getElementById('autoNoticeCount').textContent = autoCount;
      document.getElementById('manualNoticeCount').textContent = manualCount;
      noticeStats.classList.remove('hidden');
      
      const noticesHTML = notices.map(notice => {
        const colorClass = getNoticeColorClass(notice.type);
        const iconClass = getNoticeIconClass(notice.type);
        const timeAgo = getTimeAgo(notice.updatedAt);
        
        const isAutomatic = notice.createdBy === 'system';
        const automaticBadge = isAutomatic ? 
          `<span class="ml-2 text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full flex items-center">
            <i class="fas fa-robot mr-1"></i>Auto-generated
          </span>` : '';

        return `
          <div class="border-l-4 border-${colorClass}-500 bg-${colorClass}-50 p-4 rounded-lg ${isAutomatic ? 'ring-2 ring-blue-200' : ''}" data-notice-id="${notice._id}">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="flex items-center mb-2 flex-wrap">
                  <i class="fas ${iconClass} text-${colorClass}-500 mr-2"></i>
                  <span class="text-sm font-semibold text-${colorClass}-700">${getNoticeTypeDisplay(notice.type)}</span>
                  ${automaticBadge}
                  <span class="ml-2 text-xs text-${colorClass}-600 bg-${colorClass}-200 px-2 py-1 rounded-full">Updated ${timeAgo}</span>
                </div>
                <h3 class="font-semibold text-gray-800 mb-1">${notice.tournamentName}</h3>
                <p class="text-sm text-gray-600 mb-2">${notice.message}</p>
                ${getNoticeDetailsHTML(notice)}
                ${isAutomatic ? '<p class="text-xs text-blue-600 mt-2 italic"><i class="fas fa-info-circle mr-1"></i>This notice was automatically generated when tournament information was updated</p>' : ''}
              </div>
              <div class="flex space-x-2 ml-4">
                <button class="delete-notice-btn text-red-600 hover:text-red-800 p-1" data-notice-id="${notice._id}" title="${isAutomatic ? 'Delete auto-generated notice' : 'Delete notice'}">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = noticesHTML;
    }
    
    function getNoticeColorClass(type) {
      const colorMap = {
        'date_change': 'orange',
        'cancellation': 'red',
        'venue_change': 'blue',
        'registration_deadline': 'green',
        'general': 'gray'
      };
      return colorMap[type] || 'gray';
    }
    
    function getNoticeIconClass(type) {
      const iconMap = {
        'date_change': 'fa-calendar-alt',
        'cancellation': 'fa-times-circle',
        'venue_change': 'fa-map-marker-alt',
        'registration_deadline': 'fa-clock',
        'general': 'fa-bell'
      };
      return iconMap[type] || 'fa-bell';
    }
    
    function getNoticeTypeDisplay(type) {
      const typeMap = {
        'date_change': 'Date Change',
        'cancellation': 'Cancelled',
        'venue_change': 'Venue Change',
        'registration_deadline': 'Registration Deadline',
        'general': 'General Notice'
      };
      return typeMap[type] || type;
    }
    
    function getNoticeDetailsHTML(notice) {
      let detailsHTML = '';
      
      if (notice.details) {
        if (notice.type === 'date_change' && notice.details.originalDate && notice.details.newDate) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-clock mr-1"></i>
              <span>Original: ${notice.details.originalDate}</span>
              <i class="fas fa-arrow-right mx-2"></i>
              <span>New: ${notice.details.newDate}</span>
            </div>
          `;
        } else if (notice.type === 'cancellation' && notice.details.reason) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-exclamation-triangle mr-1"></i>
              <span>Reason: ${notice.details.reason}</span>
            </div>
          `;
        } else if (notice.type === 'venue_change' && notice.details.originalVenue && notice.details.newVenue) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-map-pin mr-1"></i>
              <span>From: ${notice.details.originalVenue}</span>
              <i class="fas fa-arrow-right mx-2"></i>
              <span>To: ${notice.details.newVenue}</span>
            </div>
          `;
        } else if (notice.type === 'registration_deadline' && notice.details.deadline) {
          detailsHTML = `
            <div class="flex items-center text-xs text-gray-500">
              <i class="fas fa-calendar-check mr-1"></i>
              <span>New Deadline: ${notice.details.deadline}</span>
            </div>
          `;
        }
      }
      
      return detailsHTML;
    }
    
    function getTimeAgo(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffMs = now - date;
      const diffMins = Math.floor(diffMs / 60000);
      const diffHours = Math.floor(diffMs / 3600000);
      const diffDays = Math.floor(diffMs / 86400000);
      
      if (diffMins < 1) return 'just now';
      if (diffMins < 60) return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;
      if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
      if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
      return date.toLocaleDateString();
    }
    
    // Notice deletion function (keep this since auto-generated notices can still be deleted)
    function deleteNotice(noticeId) {
      if (!confirm('Are you sure you want to delete this notice?')) {
        return;
      }
      
      fetch(`/admin/tournament-notices/${noticeId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          loadTournamentNotices();
          showSuccessMessage('Notice deleted successfully!');
        } else {
          console.error('Failed to delete notice:', data.message);
          alert('Failed to delete notice: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error deleting notice:', error);
        alert('Error deleting notice. Please try again.');
      });
    }
    
    // Helper function to format date for HTML input
    function formatDateForInput(dateString) {
      if (!dateString) return '';
      try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return '';
        return date.toISOString().split('T')[0]; // Returns yyyy-MM-dd format
      } catch (error) {
        console.error('Date formatting error:', error);
        return '';
      }
    }
    
    // Edit Modal Functions
    function openEditModal(id, name, startDate, endDate, type, venue, city, organizer, personInCharge, phoneNumber, version) {
      console.log('Opening edit modal for:', name);
      
      const modal = document.getElementById('editModal');
      const modalContent = document.getElementById('editModalContent');
      const form = document.getElementById('editTournamentForm');
      
      if (!modal || !modalContent || !form) {
        console.error('Modal elements not found!');
        return;
      }
      
      // Set form action
      form.action = `/admin/tournaments/update/${id}`;
      
      // Add hidden version field
      let versionField = document.getElementById('tournamentVersion');
      if (!versionField) {
        versionField = document.createElement('input');
        versionField.type = 'hidden';
        versionField.id = 'tournamentVersion';
        versionField.name = 'version';
        form.appendChild(versionField);
      }
      versionField.value = version || 0;
      
      // Populate form fields
      document.getElementById('editName').value = name || '';
      document.getElementById('editStartDate').value = formatDateForInput(startDate);
      document.getElementById('editEndDate').value = formatDateForInput(endDate);
      document.getElementById('editType').value = type || '';
      document.getElementById('editVenue').value = venue || '';
      document.getElementById('editCity').value = city || '';
      document.getElementById('editOrganizer').value = organizer || '';
      document.getElementById('editPersonInCharge').value = personInCharge || '';
      document.getElementById('editPhoneNumber').value = phoneNumber || '';
      
      // Update labels for filled fields
      document.querySelectorAll('#editModal .input-field').forEach(field => {
        if (field.value) {
          field.classList.add('has-value');
        }
      });
      
      // Show modal
      modal.style.display = 'flex';
      modal.classList.remove('hidden');
      
      // Animate modal
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }

    // Close modal
    function closeEditModal() {
      const modal = document.getElementById('editModal');
      const modalContent = document.getElementById('editModalContent');
      
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      
      setTimeout(() => {
        modal.style.display = 'none';
        modal.classList.add('hidden');
      }, 200);
    }
    
    // Success notification
    function showSuccessMessage(message) {
      // Remove existing notifications
      const existingNotifications = document.querySelectorAll('.success-notification');
      existingNotifications.forEach(notification => notification.remove());
      
      // Create new notification
      const notification = document.createElement('div');
      notification.className = 'success-notification';
      notification.textContent = message;
      document.body.appendChild(notification);
      
      // Show notification
      setTimeout(() => {
        notification.classList.add('show');
      }, 100);
      
      // Hide notification after 5 seconds
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      }, 5000);
    }
    
    // Setup edit and delete functionality
    function setupEditDeleteFunctionality() {
      // Handle edit button clicks
      document.addEventListener('click', function(e) {
        if (e.target.closest('.edit-btn')) {
          const btn = e.target.closest('.edit-btn');
          const id = btn.dataset.tournamentId;
          const name = btn.dataset.tournamentName;
          const startDate = btn.dataset.tournamentStart;
          const endDate = btn.dataset.tournamentEnd;
          const type = btn.dataset.tournamentType;
          const venue = btn.dataset.tournamentVenue;
          const city = btn.dataset.tournamentCity;
          const organizer = btn.dataset.tournamentOrganizer;
          const personInCharge = btn.dataset.tournamentPerson;
          const phoneNumber = btn.dataset.tournamentPhone;
          const version = btn.dataset.tournamentVersion;
          
          openEditModal(id, name, startDate, endDate, type, venue, city, organizer, personInCharge, phoneNumber, version);
        }
        
        // Handle delete button clicks
        if (e.target.closest('.delete-btn')) {
          const btn = e.target.closest('.delete-btn');
          const tournamentId = btn.dataset.tournamentId;
          const tournamentName = btn.dataset.tournamentName;
          
          if (confirm(`Are you sure you want to delete "${tournamentName}"?`)) {
            deleteTournament(tournamentId, tournamentName, btn);
          }
        }
        
        // Close modal buttons
        if (e.target.closest('.close-modal-btn') || e.target.closest('.cancel-btn')) {
          closeEditModal();
        }
      });
      
      // Handle form submission
      document.getElementById('editTournamentForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        
        // Show loading state
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';
        submitBtn.disabled = true;
        
        try {
          const response = await fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          });
          
          const result = await response.json();
          
          if (response.status === 401) {
            alert('Session expired. Please login again.');
            window.location.href = '/login?reason=timeout';
            return;
          }
          
          if (result.success) {
            showSuccessMessage('Tournament updated successfully! ‚úÖ');
            closeEditModal();
            
            // Immediately refresh notices to show any auto-generated ones
            setTimeout(() => {
              loadTournamentNotices(true);
            }, 1000);
            
            // Reload page to show updated data
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            throw new Error(result.message || 'Failed to update tournament');
          }
        } catch (error) {
          console.error('Update error:', error);
          alert('Error updating tournament: ' + error.message);
        } finally {
          // Reset button
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      });
    }
    
    // Delete tournament function
    async function deleteTournament(tournamentId, tournamentName, deleteBtn) {
      const originalText = deleteBtn.innerHTML;
      
      // Show loading state
      deleteBtn.innerHTML = `
        <svg class="w-4 h-4 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        Deleting...
      `;

      try {
        const response = await fetch(`/admin/tournaments/delete/${tournamentId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        const result = await response.json();

        if (result.success) {
          // Find and remove the tournament card with animation
          const tournamentCard = deleteBtn.closest('.tournament-card');
          if (tournamentCard) {
            tournamentCard.style.transition = 'all 0.5s ease';
            tournamentCard.style.transform = 'translateX(-100%)';
            tournamentCard.style.opacity = '0';
            
            setTimeout(() => {
              tournamentCard.remove();
              
              // Check if no tournaments left and show empty state
              const remainingCards = document.querySelectorAll('.tournament-card');
              if (remainingCards.length === 0) {
                const tournamentsGrid = document.getElementById('tournamentsGrid');
                if (tournamentsGrid) {
                  tournamentsGrid.innerHTML = `
                    <div class="col-span-full text-center py-12">
                      <div class="text-6xl mb-4">üèÜ</div>
                      <h3 class="text-xl font-semibold text-gray-600 mb-2">No tournaments yet</h3>
                      <p class="text-gray-500">Start creating tournaments to see them here!</p>
                      <a href="/admin/tournaments" class="mt-4 inline-block bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300">
                        Create First Tournament
                      </a>
                    </div>
                  `;
                }
              }
            }, 500);
          }
          
          // Show success message
          showSuccessMessage(`Tournament "${tournamentName}" has been deleted successfully! üóëÔ∏è`);
        } else {
          throw new Error(result.message || 'Failed to delete tournament');
        }
      } catch (error) {
        console.error('Delete error:', error);
        alert('Error deleting tournament: ' + error.message);
        // Reset button on error
        deleteBtn.innerHTML = originalText;
      }
    }
  </script>
</body>
</html>