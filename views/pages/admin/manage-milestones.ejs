<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Milestones - Malaysia Pickleball Association</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    .form-container {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }
    
    .form-container::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
    }
    
    .form-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      position: relative;
      z-index: 2;
    }
    
    .input-group {
      position: relative;
      margin-bottom: 1.5rem;
    }
    
    .input-field {
      width: 100%;
      padding: 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
    }
    
    .input-field:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      transform: translateY(-1px);
    }
    
    .input-label {
      position: absolute;
      top: -0.5rem;
      left: 1rem;
      background: white;
      color: #6b7280;
      font-size: 0.875rem;
      font-weight: 500;
      padding: 0 0.5rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
      color: white;
      padding: 1rem 2rem;
      border-radius: 12px;
      font-weight: 600;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
    }
    
    .milestone-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      border-left: 4px solid transparent;
    }
    
    .milestone-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
      border-left-color: #3b82f6;
    }
    
    .image-preview {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 12px;
      border: 3px solid #e5e7eb;
      transition: all 0.3s ease;
    }
    
    .image-upload-area {
      border: 2px dashed #d1d5db;
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .image-upload-area:hover {
      border-color: #3b82f6;
      background-color: #f8fafc;
    }
    
    .image-upload-area.dragover {
      border-color: #3b82f6;
      background-color: #eff6ff;
    }
    
    .delete-btn {
      background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      font-size: 0.875rem;
      transition: all 0.3s ease;
    }
    
    .delete-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }
    
    .edit-btn {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      font-size: 0.875rem;
      transition: all 0.3s ease;
      margin-right: 0.5rem;
    }
    
    .edit-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }
  </style>
</head>
<body class="bg-gray-50" style="padding-top: var(--navbar-height);">
  
  <main class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-4xl font-bold text-gray-800 mb-2">Manage Milestones</h1>
          <p class="text-gray-600">Add, edit, and manage MPA milestone achievements</p>
        </div>
        <a href="/admin/dashboard" class="flex items-center space-x-2 bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors duration-200">
          <i class="fas fa-arrow-left"></i>
          <span>Back to Dashboard</span>
        </a>
      </div>
    </div>

    <!-- Add/Edit Milestone Form -->
    <div class="form-container mb-8">
      <div class="form-card p-8">
        <div class="flex items-center mb-6">
          <i class="fas fa-trophy text-blue-600 text-2xl mr-3"></i>
          <h2 class="text-2xl font-bold text-gray-800" id="formTitle">Add New Milestone</h2>
        </div>
        
        <form id="milestoneForm" enctype="multipart/form-data">
          <input type="hidden" id="milestoneId" name="id">
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Left Column -->
            <div>
              <!-- Title -->
              <div class="input-group">
                <label class="input-label">Milestone Title *</label>
                <input type="text" id="milestoneTitle" name="title" class="input-field" placeholder="Enter milestone title" required>
              </div>
              
              <!-- Date -->
              <div class="input-group">
                <label class="input-label">Date *</label>
                <input type="date" id="milestoneDate" name="date" class="input-field" required>
              </div>
              
              <!-- Description -->
              <div class="input-group">
                <label class="input-label">Description *</label>
                <textarea id="milestoneDescription" name="description" rows="4" class="input-field" placeholder="Enter milestone description" required></textarea>
              </div>
            </div>
            
            <!-- Right Column -->
            <div>
              <!-- Image Upload -->
              <div class="input-group">
                <label class="input-label">Milestone Image</label>
                <div class="image-upload-area" id="imageUploadArea">
                  <input type="file" id="milestoneImage" name="image" accept="image/*" class="hidden">
                  <div id="uploadContent">
                    <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>
                    <p class="text-gray-600 mb-2">Click to upload or drag and drop</p>
                    <p class="text-sm text-gray-400">PNG, JPG, GIF up to 5MB</p>
                  </div>
                  <div id="imagePreview" class="hidden">
                    <img id="previewImg" src="" alt="Preview" class="image-preview mx-auto mb-4">
                    <p class="text-sm text-gray-600" id="fileName"></p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Form Buttons -->
          <div class="flex justify-end space-x-4 mt-8">
            <button type="button" id="cancelBtn" class="px-6 py-3 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors duration-200">
              Cancel
            </button>
            <button type="submit" class="btn-primary">
              <i class="fas fa-save mr-2"></i>
              <span id="submitText">Save Milestone</span>
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Existing Milestones -->
    <div class="bg-white rounded-xl shadow-lg p-8">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Existing Milestones</h2>
        <div class="flex items-center space-x-2">
          <i class="fas fa-list text-gray-500"></i>
          <span class="text-gray-600" id="milestoneCount">0 milestones</span>
        </div>
      </div>
      
      <!-- Milestones List -->
      <div id="milestonesList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Milestones will be loaded here -->
      </div>
      
      <!-- Empty State -->
      <div id="emptyState" class="text-center py-12 hidden">
        <i class="fas fa-trophy text-6xl text-gray-300 mb-4"></i>
        <h3 class="text-xl font-semibold text-gray-600 mb-2">No milestones yet</h3>
        <p class="text-gray-400">Add your first milestone to get started!</p>
      </div>
    </div>
  </main>

  <script>
    let milestones = [];
    let editingId = null;

    document.addEventListener('DOMContentLoaded', function() {
      loadMilestones();
      setupEventListeners();
    });

    function setupEventListeners() {
      const form = document.getElementById('milestoneForm');
      const imageInput = document.getElementById('milestoneImage');
      const uploadArea = document.getElementById('imageUploadArea');
      const cancelBtn = document.getElementById('cancelBtn');

      // Form submission
      form.addEventListener('submit', handleFormSubmit);

      // Cancel button
      cancelBtn.addEventListener('click', resetForm);

      // Image upload
      uploadArea.addEventListener('click', () => imageInput.click());
      imageInput.addEventListener('change', handleImageUpload);

      // Drag and drop
      uploadArea.addEventListener('dragover', handleDragOver);
      uploadArea.addEventListener('dragleave', handleDragLeave);
      uploadArea.addEventListener('drop', handleDrop);
    }

    function handleFormSubmit(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);

      if (editingId) {
        updateMilestone(formData);
      } else {
        addMilestone(formData);
      }
    }

    async function addMilestone(formData) {
      try {
        const response = await fetch('/api/milestones', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          showNotification('Milestone added successfully!', 'success');
          resetForm();
          loadMilestones();
        } else {
          showNotification(result.message || 'Failed to add milestone', 'error');
        }
      } catch (error) {
        console.error('Error adding milestone:', error);
        showNotification('Failed to add milestone', 'error');
      }
    }

    async function updateMilestone(formData) {
      try {
        const response = await fetch(`/api/milestones/${editingId}`, {
          method: 'PUT',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          showNotification('Milestone updated successfully!', 'success');
          resetForm();
          loadMilestones();
        } else {
          showNotification(result.message || 'Failed to update milestone', 'error');
        }
      } catch (error) {
        console.error('Error updating milestone:', error);
        showNotification('Failed to update milestone', 'error');
      }
    }

    async function deleteMilestone(id) {
      if (confirm('Are you sure you want to delete this milestone?')) {
        try {
          const response = await fetch(`/api/milestones/${id}`, {
            method: 'DELETE'
          });

          const result = await response.json();

          if (result.success) {
            showNotification('Milestone deleted successfully!', 'success');
            loadMilestones();
          } else {
            showNotification(result.message || 'Failed to delete milestone', 'error');
          }
        } catch (error) {
          console.error('Error deleting milestone:', error);
          showNotification('Failed to delete milestone', 'error');
        }
      }
    }

    function editMilestone(id) {
      const milestone = milestones.find(m => m._id == id);
      if (!milestone) return;

      editingId = id;
      
      document.getElementById('formTitle').textContent = 'Edit Milestone';
      document.getElementById('submitText').textContent = 'Update Milestone';
      document.getElementById('milestoneId').value = id;
      document.getElementById('milestoneTitle').value = milestone.title;
      document.getElementById('milestoneDate').value = milestone.date.split('T')[0]; // Format date for input
      document.getElementById('milestoneDescription').value = milestone.description;

      // Scroll to form
      document.getElementById('milestoneForm').scrollIntoView({ behavior: 'smooth' });
    }

    function resetForm() {
      editingId = null;
      document.getElementById('formTitle').textContent = 'Add New Milestone';
      document.getElementById('submitText').textContent = 'Save Milestone';
      document.getElementById('milestoneForm').reset();
      
      // Reset image preview
      document.getElementById('uploadContent').classList.remove('hidden');
      document.getElementById('imagePreview').classList.add('hidden');
    }

    async function loadMilestones() {
      const container = document.getElementById('milestonesList');
      const emptyState = document.getElementById('emptyState');
      const countElement = document.getElementById('milestoneCount');
      
      try {
        const response = await fetch('/api/milestones');
        const result = await response.json();
        
        if (result.success) {
          milestones = result.milestones;
        } else {
          console.error('Failed to load milestones:', result.message);
          milestones = [];
        }
      } catch (error) {
        console.error('Error loading milestones:', error);
        milestones = [];
      }
      
      if (milestones.length === 0) {
        container.innerHTML = '';
        emptyState.classList.remove('hidden');
        countElement.textContent = '0 milestones';
        return;
      }

      emptyState.classList.add('hidden');
      countElement.textContent = `${milestones.length} milestone${milestones.length !== 1 ? 's' : ''}`;

      // Sort milestones by date (newest first)
      const sortedMilestones = [...milestones].sort((a, b) => new Date(b.date) - new Date(a.date));

      container.innerHTML = sortedMilestones.map(milestone => `
        <div class="milestone-card">
          <div class="flex items-start space-x-4">
            <img src="${milestone.image || '/images/milestone-placeholder.jpg'}" 
                 alt="${milestone.title}" 
                 class="w-16 h-16 rounded-lg object-cover border-2 border-gray-200"
                 onerror="this.src='/images/milestone-placeholder.jpg'">
            <div class="flex-1 min-w-0">
              <h3 class="text-lg font-semibold text-gray-900 truncate">${milestone.title}</h3>
              <p class="text-sm text-gray-500 mb-2">${formatDate(milestone.date)}</p>
              <p class="text-sm text-gray-700 line-clamp-2">${milestone.description}</p>
              <p class="text-xs text-gray-400 mt-1">
                <span class="inline-block px-2 py-1 bg-${milestone.status === 'published' ? 'green' : 'gray'}-100 text-${milestone.status === 'published' ? 'green' : 'gray'}-600 rounded-full text-xs">
                  ${milestone.status}
                </span>
                ${milestone.category ? `<span class="ml-2 text-blue-600">${milestone.category}</span>` : ''}
              </p>
            </div>
          </div>
          <div class="flex justify-end space-x-2 mt-4 pt-4 border-t border-gray-100">
            <button onclick="editMilestone('${milestone._id}')" class="edit-btn">
              <i class="fas fa-edit mr-1"></i>
              Edit
            </button>
            <button onclick="deleteMilestone('${milestone._id}')" class="delete-btn">
              <i class="fas fa-trash mr-1"></i>
              Delete
            </button>
          </div>
        </div>
      `).join('');
    }

    function handleImageUpload(e) {
      const file = e.target.files[0];
      if (file) {
        displayImagePreview(file);
      }
    }

    function handleDragOver(e) {
      e.preventDefault();
      e.currentTarget.classList.add('dragover');
    }

    function handleDragLeave(e) {
      e.currentTarget.classList.remove('dragover');
    }

    function handleDrop(e) {
      e.preventDefault();
      e.currentTarget.classList.remove('dragover');
      
      const file = e.dataTransfer.files[0];
      if (file && file.type.startsWith('image/')) {
        document.getElementById('milestoneImage').files = e.dataTransfer.files;
        displayImagePreview(file);
      }
    }

    function displayImagePreview(file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        document.getElementById('uploadContent').classList.add('hidden');
        document.getElementById('imagePreview').classList.remove('hidden');
        document.getElementById('previewImg').src = e.target.result;
        document.getElementById('fileName').textContent = file.name;
      };
      reader.readAsDataURL(file);
    }

    function formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }

    function showNotification(message, type) {
      // Simple notification system
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // Load milestones when page loads
    setTimeout(() => {
      loadMilestones();
    }, 500);
  </script>

  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</body>
</html>